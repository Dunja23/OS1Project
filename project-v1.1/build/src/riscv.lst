GAS LISTING /tmp/ccXEx6sp.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB45:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** 
   2:src/riscv.cpp **** #include "../h/riscv.hpp"
   3:src/riscv.cpp **** #include "../h/tcb.hpp"
   4:src/riscv.cpp **** #include "../lib/console.h"
   5:src/riscv.cpp **** #include "../test/printing.hpp"
   6:src/riscv.cpp **** 
   7:src/riscv.cpp **** using Body = void (*)(void*);
   8:src/riscv.cpp **** 
   9:src/riscv.cpp **** void Riscv::popSppSpie()
  10:src/riscv.cpp **** {
  12              		.loc 1 10 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  11:src/riscv.cpp ****     __asm__ volatile("csrw sepc, ra");
  20              		.loc 1 11 5
  21              		.loc 1 11 38 is_stmt 0
  22              	#APP
  23              	# 11 "src/riscv.cpp" 1
  12              	    __asm__ volatile("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 12 5 is_stmt 1
  27              		.loc 1 12 29 is_stmt 0
  28              	# 12 "src/riscv.cpp" 1
  13              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 13 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE45:
  42              		.section	.rodata.str1.8,"aMS",@progbits,1
  43              		.align	3
  44              	.LC0:
  45 0000 4572726F 		.string	"Error: scause =  "
  45      723A2073 
GAS LISTING /tmp/ccXEx6sp.s 			page 2


  45      63617573 
  45      65203D20 
  45      2000
  46 0012 00000000 		.align	3
  46      0000
  47              	.LC1:
  48 0018 0A00     		.string	"\n"
  49              		.text
  50              		.align	2
  51              		.globl	_ZN5Riscv23handleSoftwareInterruptEv
  53              	_ZN5Riscv23handleSoftwareInterruptEv:
  54              	.LFB46:
  14:src/riscv.cpp **** 
  15:src/riscv.cpp **** void Riscv::handleSoftwareInterrupt()
  16:src/riscv.cpp **** {
  55              		.loc 1 16 1 is_stmt 1
  56              		.cfi_startproc
  57 0020 130101FB 		addi	sp,sp,-80
  58              		.cfi_def_cfa_offset 80
  59 0024 23341104 		sd	ra,72(sp)
  60 0028 23308104 		sd	s0,64(sp)
  61 002c 233C9102 		sd	s1,56(sp)
  62              		.cfi_offset 1, -8
  63              		.cfi_offset 8, -16
  64              		.cfi_offset 9, -24
  65 0030 13040105 		addi	s0,sp,80
  66              		.cfi_def_cfa 8, 0
  17:src/riscv.cpp ****     uint64 scause = r_scause();
  67              		.loc 1 17 5
  68              	.LBB26:
  69              	.LBB27:
  70              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** 
   2:src/../h/riscv.hpp **** #ifndef PROJECT_V1_1_RISCV_HPP
   3:src/../h/riscv.hpp **** #define PROJECT_V1_1_RISCV_HPP
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #include "../lib/hw.h"
   6:src/../h/riscv.hpp **** 
   7:src/../h/riscv.hpp **** class Riscv
   8:src/../h/riscv.hpp **** {
   9:src/../h/riscv.hpp **** public:
  10:src/../h/riscv.hpp **** 
  11:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  12:src/../h/riscv.hpp ****     static void popSppSpie();
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp ****     // read register scause
  15:src/../h/riscv.hpp ****     static uint64 r_scause();
  16:src/../h/riscv.hpp **** 
  17:src/../h/riscv.hpp ****     // write register scause
  18:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // read register sepc
  21:src/../h/riscv.hpp ****     static uint64 r_sepc();
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // write register sepc
  24:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  25:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccXEx6sp.s 			page 3


  26:src/../h/riscv.hpp ****     // read register stvec
  27:src/../h/riscv.hpp ****     static uint64 r_stvec();
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // write register stvec
  30:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // read register stval
  33:src/../h/riscv.hpp ****     static uint64 r_stval();
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // write register stval
  36:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     enum BitMaskSip
  39:src/../h/riscv.hpp ****     {
  40:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  41:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  42:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  43:src/../h/riscv.hpp ****     };
  44:src/../h/riscv.hpp **** 
  45:src/../h/riscv.hpp **** 
  46:src/../h/riscv.hpp **** 
  47:src/../h/riscv.hpp ****     // mask set register sip
  48:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  49:src/../h/riscv.hpp **** 
  50:src/../h/riscv.hpp ****     // mask clear register sip
  51:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  52:src/../h/riscv.hpp **** 
  53:src/../h/riscv.hpp ****     // read register sip
  54:src/../h/riscv.hpp ****     static uint64 r_sip();
  55:src/../h/riscv.hpp **** 
  56:src/../h/riscv.hpp ****     // write register sip
  57:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  58:src/../h/riscv.hpp **** 
  59:src/../h/riscv.hpp ****     enum BitMaskSstatus
  60:src/../h/riscv.hpp ****     {
  61:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  62:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  63:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  64:src/../h/riscv.hpp ****     };
  65:src/../h/riscv.hpp **** 
  66:src/../h/riscv.hpp ****     // mask set register sstatus
  67:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  68:src/../h/riscv.hpp **** 
  69:src/../h/riscv.hpp ****     // mask clear register sstatus
  70:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  71:src/../h/riscv.hpp **** 
  72:src/../h/riscv.hpp ****     // read register sstatus
  73:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  74:src/../h/riscv.hpp **** 
  75:src/../h/riscv.hpp ****     // write register sstatus
  76:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  77:src/../h/riscv.hpp **** 
  78:src/../h/riscv.hpp ****     // vector table
  79:src/../h/riscv.hpp ****     static void vectorTable();
  80:src/../h/riscv.hpp **** 
  81:src/../h/riscv.hpp **** private:
  82:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccXEx6sp.s 			page 4


  83:src/../h/riscv.hpp ****     static void handleSoftwareInterrupt();
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp ****     static void handleTimerInterrupt();
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp ****     static void handleConsoleInterrupt();
  88:src/../h/riscv.hpp **** 
  89:src/../h/riscv.hpp **** };
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
  92:src/../h/riscv.hpp **** {
  93:src/../h/riscv.hpp ****     uint64 volatile scause;
  71              		.loc 2 93 5
  94:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  72              		.loc 2 94 5
  73              		.loc 2 94 72 is_stmt 0
  74              	#APP
  75              	# 94 "src/../h/riscv.hpp" 1
  95              	    return scause;
  76              		csrr a5, scause
  77              	# 0 "" 2
  78              	#NO_APP
  79 0038 2334F4FC 		sd	a5,-56(s0)
  80              		.loc 2 95 5 is_stmt 1
  81              		.loc 2 95 12 is_stmt 0
  82 003c 833484FC 		ld	s1,-56(s0)
  83              	.LVL0:
  84              	.LBE27:
  85              	.LBE26:
  18:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  86              		.loc 1 18 5 is_stmt 1
  87              	.LBB28:
  88              		.loc 1 18 40 is_stmt 0
  89 0040 138784FF 		addi	a4,s1,-8
  90              		.loc 1 18 5
  91 0044 93071000 		li	a5,1
  92 0048 63EEE724 		bgtu	a4,a5,.L4
  93              	.LBB29:
  19:src/riscv.cpp ****     {
  20:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  21:src/riscv.cpp ****         uint64 volatile sepc = r_sepc() + 4;
  94              		.loc 1 21 9 is_stmt 1
  95              	.LBB30:
  96              	.LBB31:
  96:src/../h/riscv.hpp **** }
  97:src/../h/riscv.hpp **** 
  98:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
  99:src/../h/riscv.hpp **** {
 100:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 101:src/../h/riscv.hpp **** }
 102:src/../h/riscv.hpp **** 
 103:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 104:src/../h/riscv.hpp **** {
 105:src/../h/riscv.hpp ****     uint64 volatile sepc;
  97              		.loc 2 105 5
 106:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
  98              		.loc 2 106 5
  99              		.loc 2 106 64 is_stmt 0
GAS LISTING /tmp/ccXEx6sp.s 			page 5


 100              	#APP
 101              	# 106 "src/../h/riscv.hpp" 1
 107              	    return sepc;
 102              		csrr a5, sepc
 103              	# 0 "" 2
 104              	#NO_APP
 105 0050 233CF4FC 		sd	a5,-40(s0)
 106              		.loc 2 107 5 is_stmt 1
 107              		.loc 2 107 12 is_stmt 0
 108 0054 833784FD 		ld	a5,-40(s0)
 109              	.LBE31:
 110              	.LBE30:
 111              		.loc 1 21 41
 112 0058 93874700 		addi	a5,a5,4
 113              		.loc 1 21 43
 114 005c 233CF4FA 		sd	a5,-72(s0)
  22:src/riscv.cpp ****         uint64 volatile sstatus = r_sstatus();
 115              		.loc 1 22 9 is_stmt 1
 116              	.LBB32:
 117              	.LBB33:
 108:src/../h/riscv.hpp **** }
 109:src/../h/riscv.hpp **** 
 110:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 111:src/../h/riscv.hpp **** {
 112:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 113:src/../h/riscv.hpp **** }
 114:src/../h/riscv.hpp **** 
 115:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 116:src/../h/riscv.hpp **** {
 117:src/../h/riscv.hpp ****     uint64 volatile stvec;
 118:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 119:src/../h/riscv.hpp ****     return stvec;
 120:src/../h/riscv.hpp **** }
 121:src/../h/riscv.hpp **** 
 122:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 123:src/../h/riscv.hpp **** {
 124:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 125:src/../h/riscv.hpp **** }
 126:src/../h/riscv.hpp **** 
 127:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 128:src/../h/riscv.hpp **** {
 129:src/../h/riscv.hpp ****     uint64 volatile stval;
 130:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 131:src/../h/riscv.hpp ****     return stval;
 132:src/../h/riscv.hpp **** }
 133:src/../h/riscv.hpp **** 
 134:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 135:src/../h/riscv.hpp **** {
 136:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 137:src/../h/riscv.hpp **** }
 138:src/../h/riscv.hpp **** 
 139:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 140:src/../h/riscv.hpp **** {
 141:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 142:src/../h/riscv.hpp **** }
 143:src/../h/riscv.hpp **** 
 144:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
GAS LISTING /tmp/ccXEx6sp.s 			page 6


 145:src/../h/riscv.hpp **** {
 146:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 147:src/../h/riscv.hpp **** }
 148:src/../h/riscv.hpp **** 
 149:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 150:src/../h/riscv.hpp **** {
 151:src/../h/riscv.hpp ****     uint64 volatile sip;
 152:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 153:src/../h/riscv.hpp ****     return sip;
 154:src/../h/riscv.hpp **** }
 155:src/../h/riscv.hpp **** 
 156:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 157:src/../h/riscv.hpp **** {
 158:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 159:src/../h/riscv.hpp **** }
 160:src/../h/riscv.hpp **** 
 161:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 162:src/../h/riscv.hpp **** {
 163:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 164:src/../h/riscv.hpp **** }
 165:src/../h/riscv.hpp **** 
 166:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 167:src/../h/riscv.hpp **** {
 168:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 169:src/../h/riscv.hpp **** }
 170:src/../h/riscv.hpp **** 
 171:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 172:src/../h/riscv.hpp **** {
 173:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 118              		.loc 2 173 5
 174:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 119              		.loc 2 174 5
 120              		.loc 2 174 76 is_stmt 0
 121              	#APP
 122              	# 174 "src/../h/riscv.hpp" 1
 175              	    return sstatus;
 123              		csrr a5, sstatus
 124              	# 0 "" 2
 125              	#NO_APP
 126 0064 2338F4FC 		sd	a5,-48(s0)
 127              		.loc 2 175 5 is_stmt 1
 128              		.loc 2 175 12 is_stmt 0
 129 0068 833704FD 		ld	a5,-48(s0)
 130              	.LBE33:
 131              	.LBE32:
 132              		.loc 1 22 45
 133 006c 2330F4FC 		sd	a5,-64(s0)
  23:src/riscv.cpp **** 
  24:src/riscv.cpp ****         SyncSemaphore* semHandle;
 134              		.loc 1 24 9 is_stmt 1
  25:src/riscv.cpp **** 
  26:src/riscv.cpp ****         uint64 func;
 135              		.loc 1 26 9
  27:src/riscv.cpp ****         __asm__ volatile("mv %0, a0" : "=r" (func));
 136              		.loc 1 27 9
 137              		.loc 1 27 52 is_stmt 0
 138              	#APP
GAS LISTING /tmp/ccXEx6sp.s 			page 7


 139              	# 27 "src/riscv.cpp" 1
  28              	
 140              		mv a5, a0
 141              	# 0 "" 2
 142              	.LVL1:
  29:src/riscv.cpp ****         switch (func) {
 143              		.loc 1 29 9 is_stmt 1
 144              	#NO_APP
 145 0074 13071005 		li	a4,81
 146 0078 636AF702 		bgtu	a5,a4,.L5
 147 007c 93972700 		slli	a5,a5,2
 148              	.LVL2:
 149 0080 17070000 		lla	a4,.L7
 149      13070700 
 150 0088 B387E700 		add	a5,a5,a4
 151 008c 83A70700 		lw	a5,0(a5)
 152 0090 B387E700 		add	a5,a5,a4
 153 0094 67800700 		jr	a5
 154              		.section	.rodata
 155              		.align	2
 156              		.align	2
 157              	.L7:
 158 0000 00000000 		.word	.L5-.L7
 159 0004 00000000 		.word	.L22-.L7
 160 0008 00000000 		.word	.L21-.L7
 161 000c 00000000 		.word	.L5-.L7
 162 0010 00000000 		.word	.L5-.L7
 163 0014 00000000 		.word	.L5-.L7
 164 0018 00000000 		.word	.L5-.L7
 165 001c 00000000 		.word	.L5-.L7
 166 0020 00000000 		.word	.L5-.L7
 167 0024 00000000 		.word	.L20-.L7
 168 0028 00000000 		.word	.L5-.L7
 169 002c 00000000 		.word	.L5-.L7
 170 0030 00000000 		.word	.L5-.L7
 171 0034 00000000 		.word	.L5-.L7
 172 0038 00000000 		.word	.L5-.L7
 173 003c 00000000 		.word	.L5-.L7
 174 0040 00000000 		.word	.L19-.L7
 175 0044 00000000 		.word	.L18-.L7
 176 0048 00000000 		.word	.L17-.L7
 177 004c 00000000 		.word	.L16-.L7
 178 0050 00000000 		.word	.L5-.L7
 179 0054 00000000 		.word	.L5-.L7
 180 0058 00000000 		.word	.L5-.L7
 181 005c 00000000 		.word	.L5-.L7
 182 0060 00000000 		.word	.L5-.L7
 183 0064 00000000 		.word	.L5-.L7
 184 0068 00000000 		.word	.L5-.L7
 185 006c 00000000 		.word	.L5-.L7
 186 0070 00000000 		.word	.L5-.L7
 187 0074 00000000 		.word	.L5-.L7
 188 0078 00000000 		.word	.L5-.L7
 189 007c 00000000 		.word	.L5-.L7
 190 0080 00000000 		.word	.L5-.L7
 191 0084 00000000 		.word	.L15-.L7
 192 0088 00000000 		.word	.L14-.L7
GAS LISTING /tmp/ccXEx6sp.s 			page 8


 193 008c 00000000 		.word	.L13-.L7
 194 0090 00000000 		.word	.L12-.L7
 195 0094 00000000 		.word	.L5-.L7
 196 0098 00000000 		.word	.L11-.L7
 197 009c 00000000 		.word	.L5-.L7
 198 00a0 00000000 		.word	.L5-.L7
 199 00a4 00000000 		.word	.L5-.L7
 200 00a8 00000000 		.word	.L5-.L7
 201 00ac 00000000 		.word	.L5-.L7
 202 00b0 00000000 		.word	.L5-.L7
 203 00b4 00000000 		.word	.L5-.L7
 204 00b8 00000000 		.word	.L5-.L7
 205 00bc 00000000 		.word	.L5-.L7
 206 00c0 00000000 		.word	.L5-.L7
 207 00c4 00000000 		.word	.L5-.L7
 208 00c8 00000000 		.word	.L5-.L7
 209 00cc 00000000 		.word	.L5-.L7
 210 00d0 00000000 		.word	.L5-.L7
 211 00d4 00000000 		.word	.L5-.L7
 212 00d8 00000000 		.word	.L5-.L7
 213 00dc 00000000 		.word	.L5-.L7
 214 00e0 00000000 		.word	.L5-.L7
 215 00e4 00000000 		.word	.L5-.L7
 216 00e8 00000000 		.word	.L5-.L7
 217 00ec 00000000 		.word	.L5-.L7
 218 00f0 00000000 		.word	.L5-.L7
 219 00f4 00000000 		.word	.L5-.L7
 220 00f8 00000000 		.word	.L5-.L7
 221 00fc 00000000 		.word	.L5-.L7
 222 0100 00000000 		.word	.L5-.L7
 223 0104 00000000 		.word	.L10-.L7
 224 0108 00000000 		.word	.L9-.L7
 225 010c 00000000 		.word	.L5-.L7
 226 0110 00000000 		.word	.L5-.L7
 227 0114 00000000 		.word	.L5-.L7
 228 0118 00000000 		.word	.L5-.L7
 229 011c 00000000 		.word	.L5-.L7
 230 0120 00000000 		.word	.L5-.L7
 231 0124 00000000 		.word	.L5-.L7
 232 0128 00000000 		.word	.L5-.L7
 233 012c 00000000 		.word	.L5-.L7
 234 0130 00000000 		.word	.L5-.L7
 235 0134 00000000 		.word	.L5-.L7
 236 0138 00000000 		.word	.L5-.L7
 237 013c 00000000 		.word	.L5-.L7
 238 0140 00000000 		.word	.L8-.L7
 239 0144 00000000 		.word	.L6-.L7
 240              		.text
 241              	.L22:
 242              	.LBB34:
  30:src/riscv.cpp **** 
  31:src/riscv.cpp ****             // mem_alloc
  32:src/riscv.cpp ****             case 0x01:
 243              		.loc 1 32 13
  33:src/riscv.cpp ****                 size_t size;
 244              		.loc 1 33 17
  34:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (size));
GAS LISTING /tmp/ccXEx6sp.s 			page 9


 245              		.loc 1 34 17
 246              		.loc 1 34 60 is_stmt 0
 247              	#APP
 248              	# 34 "src/riscv.cpp" 1
  35              	                uint64 addr;
 249              		mv a0, a1
 250              	# 0 "" 2
 251              	.LVL3:
 252              		.loc 1 35 17 is_stmt 1
  36:src/riscv.cpp ****                 addr = (uint64)MemoryAllocator::mem_alloc(size);
 253              		.loc 1 36 17
 254              		.loc 1 36 58 is_stmt 0
 255              	#NO_APP
 256 009c 97000000 		call	_ZN15MemoryAllocator9mem_allocEm@plt
 256      E7800000 
 257              	.LVL4:
  37:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r"(addr));
 258              		.loc 1 37 17 is_stmt 1
 259              		.loc 1 37 60 is_stmt 0
 260              	#APP
 261              	# 37 "src/riscv.cpp" 1
  38              	                __asm__ volatile ("sd a0, 80(fp)");
 262              		mv a0, a0
 263              	# 0 "" 2
 264              		.loc 1 38 17 is_stmt 1
 265              		.loc 1 38 51 is_stmt 0
 266              	# 38 "src/riscv.cpp" 1
  39              	                break;
 267              		sd a0, 80(fp)
 268              	# 0 "" 2
 269              		.loc 1 39 17 is_stmt 1
 270              	.LVL5:
 271              	#NO_APP
 272              	.L5:
 273              	.LBE34:
  40:src/riscv.cpp **** 
  41:src/riscv.cpp ****             // mem_free
  42:src/riscv.cpp ****             case 0x02:
  43:src/riscv.cpp ****                 void* ptr;
  44:src/riscv.cpp ****                 int ret;
  45:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (ptr));
  46:src/riscv.cpp ****                 ret = MemoryAllocator::mem_free(ptr);
  47:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r"(ret));
  48:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
  49:src/riscv.cpp ****                 break;
  50:src/riscv.cpp **** 
  51:src/riscv.cpp ****             // thread_start
  52:src/riscv.cpp ****             case 0x09:
  53:src/riscv.cpp ****                 TCB* tcb;
  54:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (tcb));
  55:src/riscv.cpp ****                 TCB::start(tcb);
  56:src/riscv.cpp ****                 break;
  57:src/riscv.cpp **** 
  58:src/riscv.cpp ****             // thread_init
  59:src/riscv.cpp ****             case 0x10:
  60:src/riscv.cpp ****                 TCB** handleInit;
  61:src/riscv.cpp ****                 Body bodyInit;
GAS LISTING /tmp/ccXEx6sp.s 			page 10


  62:src/riscv.cpp ****                 void* argInit;
  63:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handleInit));
  64:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (bodyInit));
  65:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a6" : "=r" (argInit));
  66:src/riscv.cpp ****                 *handleInit = TCB::initThread(bodyInit, argInit);
  67:src/riscv.cpp ****                 if(*handleInit != nullptr) {
  68:src/riscv.cpp ****                     __asm__ volatile ("li a0, 0");
  69:src/riscv.cpp ****                     __asm__ volatile ("sd a0, 80(fp)");
  70:src/riscv.cpp ****                 }
  71:src/riscv.cpp ****                 else {
  72:src/riscv.cpp ****                     __asm__ volatile ("li a0, -1");
  73:src/riscv.cpp ****                     __asm__ volatile ("sd a0, 80(fp)");
  74:src/riscv.cpp ****                 }
  75:src/riscv.cpp ****                 break;
  76:src/riscv.cpp **** 
  77:src/riscv.cpp ****             // thread_create
  78:src/riscv.cpp ****             case 0x11:
  79:src/riscv.cpp ****                 TCB** handle;
  80:src/riscv.cpp ****                 Body body;
  81:src/riscv.cpp ****                 void* arg;
  82:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
  83:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
  84:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a6" : "=r" (arg));
  85:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg);
  86:src/riscv.cpp ****                 if(*handle != nullptr) {
  87:src/riscv.cpp ****                     __asm__ volatile ("li a0, 0");
  88:src/riscv.cpp ****                     __asm__ volatile ("sd a0, 80(fp)");
  89:src/riscv.cpp ****                 }
  90:src/riscv.cpp ****                 else {
  91:src/riscv.cpp ****                     __asm__ volatile ("li a0, -1");
  92:src/riscv.cpp ****                     __asm__ volatile ("sd a0, 80(fp)");
  93:src/riscv.cpp ****                 }
  94:src/riscv.cpp ****                 break;
  95:src/riscv.cpp **** 
  96:src/riscv.cpp ****             // thread_exit
  97:src/riscv.cpp ****             case 0x12:
  98:src/riscv.cpp ****                 TCB::running->setFinished(true);
  99:src/riscv.cpp ****                 TCB::dispatch();
 100:src/riscv.cpp ****                 __asm__ volatile ("li a0, 0");
 101:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
 102:src/riscv.cpp ****                 break;
 103:src/riscv.cpp **** 
 104:src/riscv.cpp ****             // thread_dispatch
 105:src/riscv.cpp ****             case 0x13:
 106:src/riscv.cpp ****                 TCB::dispatch();
 107:src/riscv.cpp ****                 break;
 108:src/riscv.cpp **** 
 109:src/riscv.cpp ****             // sem_open
 110:src/riscv.cpp ****             case 0x21:
 111:src/riscv.cpp ****                 SyncSemaphore** sem;
 112:src/riscv.cpp ****                 unsigned semValue;
 113:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (sem));
 114:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (semValue));
 115:src/riscv.cpp ****                 *sem = SyncSemaphore::createSyncSemaphore((int)semValue);
 116:src/riscv.cpp ****                 if(*sem != nullptr) {
 117:src/riscv.cpp ****                     __asm__ volatile ("li a0, 0");
 118:src/riscv.cpp ****                     __asm__ volatile ("sd a0, 80(fp)");
GAS LISTING /tmp/ccXEx6sp.s 			page 11


 119:src/riscv.cpp ****                 }
 120:src/riscv.cpp ****                 else {
 121:src/riscv.cpp ****                     __asm__ volatile ("li a0, -1");
 122:src/riscv.cpp ****                     __asm__ volatile ("sd a0, 80(fp)");
 123:src/riscv.cpp ****                 }
 124:src/riscv.cpp ****                 break;
 125:src/riscv.cpp **** 
 126:src/riscv.cpp ****             // sem_close
 127:src/riscv.cpp ****             case 0x22:
 128:src/riscv.cpp ****                 int retClose;
 129:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (semHandle));
 130:src/riscv.cpp ****                 if(semHandle!= nullptr) retClose = semHandle->close();
 131:src/riscv.cpp ****                 else retClose = -2;
 132:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r"(retClose));
 133:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
 134:src/riscv.cpp ****                 break;
 135:src/riscv.cpp **** 
 136:src/riscv.cpp ****             // sem_wait
 137:src/riscv.cpp ****             case 0x23:
 138:src/riscv.cpp ****                 int retWait;
 139:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (semHandle));
 140:src/riscv.cpp ****                 if(semHandle!= nullptr) retWait = semHandle->wait();
 141:src/riscv.cpp ****                 else retWait = -2;
 142:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r"(retWait));
 143:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
 144:src/riscv.cpp ****                 break;
 145:src/riscv.cpp **** 
 146:src/riscv.cpp ****             // sem_signal
 147:src/riscv.cpp ****             case 0x24:
 148:src/riscv.cpp ****                 int retSignal;
 149:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (semHandle));
 150:src/riscv.cpp ****                 if(semHandle!= nullptr) retSignal = semHandle->signal();
 151:src/riscv.cpp ****                 else retSignal = -2;
 152:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r"(retSignal));
 153:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
 154:src/riscv.cpp ****                 break;
 155:src/riscv.cpp **** 
 156:src/riscv.cpp ****             // sem_trywait
 157:src/riscv.cpp ****             case 0x26:
 158:src/riscv.cpp ****                 int retTryWait;
 159:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (semHandle));
 160:src/riscv.cpp ****                 if(semHandle!= nullptr) retTryWait = semHandle->wait();
 161:src/riscv.cpp ****                 else retTryWait = -2;
 162:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r"(retTryWait));
 163:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
 164:src/riscv.cpp ****                 break;
 165:src/riscv.cpp **** 
 166:src/riscv.cpp ****             //getc
 167:src/riscv.cpp ****             case 0x41:
 168:src/riscv.cpp ****                 int retGet;
 169:src/riscv.cpp ****                 retGet = __getc();
 170:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r"(retGet));
 171:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
 172:src/riscv.cpp ****                 break;
 173:src/riscv.cpp **** 
 174:src/riscv.cpp ****             //putc
 175:src/riscv.cpp ****             case 0x42:
GAS LISTING /tmp/ccXEx6sp.s 			page 12


 176:src/riscv.cpp ****                 char c;
 177:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (c));
 178:src/riscv.cpp ****                 __putc(c);
 179:src/riscv.cpp ****                 break;
 180:src/riscv.cpp **** 
 181:src/riscv.cpp ****             //pair
 182:src/riscv.cpp ****             case 0x50:
 183:src/riscv.cpp ****                 TCB* t1;
 184:src/riscv.cpp ****                 TCB* t2;
 185:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (t1));
 186:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (t2));
 187:src/riscv.cpp ****                 t1->setMyPair(t2);
 188:src/riscv.cpp ****                 t2->setMyPair(t1);
 189:src/riscv.cpp ****                 break;
 190:src/riscv.cpp **** 
 191:src/riscv.cpp ****             //synchronize
 192:src/riscv.cpp ****             case 0x51:
 193:src/riscv.cpp ****                 TCB* t;
 194:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (t));
 195:src/riscv.cpp ****                 t->synchronizeTCB();
 196:src/riscv.cpp ****                 break;
 197:src/riscv.cpp **** 
 198:src/riscv.cpp ****             default:
 199:src/riscv.cpp ****                 break;
 200:src/riscv.cpp ****         }
 201:src/riscv.cpp **** 
 202:src/riscv.cpp ****         w_sstatus(sstatus);
 274              		.loc 1 202 9
 275              		.loc 1 202 18 is_stmt 0
 276 00ac 833704FC 		ld	a5,-64(s0)
 277              	.LVL6:
 278              	.LBB43:
 279              	.LBB44:
 176:src/../h/riscv.hpp **** }
 177:src/../h/riscv.hpp **** 
 178:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 179:src/../h/riscv.hpp **** {
 180:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 280              		.loc 2 180 5 is_stmt 1
 281              		.loc 2 180 77 is_stmt 0
 282              	#APP
 283              	# 180 "src/../h/riscv.hpp" 1
 181              	}
 284              		csrw sstatus, a5
 285              	# 0 "" 2
 286              	.LVL7:
 287              	#NO_APP
 288              	.LBE44:
 289              	.LBE43:
 203:src/riscv.cpp ****         w_sepc(sepc);
 290              		.loc 1 203 9 is_stmt 1
 291              		.loc 1 203 15 is_stmt 0
 292 00b4 833784FB 		ld	a5,-72(s0)
 293              	.LVL8:
 294              	.LBB45:
 295              	.LBB46:
 112:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccXEx6sp.s 			page 13


 296              		.loc 2 112 5 is_stmt 1
 112:src/../h/riscv.hpp **** }
 297              		.loc 2 112 65 is_stmt 0
 298              	#APP
 299              	# 112 "src/../h/riscv.hpp" 1
 300              		csrw sepc, a5
 301              	# 0 "" 2
 302              	.LVL9:
 303              	#NO_APP
 304              	.L3:
 305              	.LBE46:
 306              	.LBE45:
 307              	.LBE29:
 308              	.LBE28:
 204:src/riscv.cpp ****     }
 205:src/riscv.cpp ****     else
 206:src/riscv.cpp ****     {
 207:src/riscv.cpp ****         printString("Error: scause =  ");
 208:src/riscv.cpp ****         printInt(scause);
 209:src/riscv.cpp ****         printString("\n");
 210:src/riscv.cpp ****         //while(true) {};
 211:src/riscv.cpp ****     }
 212:src/riscv.cpp **** 
 213:src/riscv.cpp **** }
 309              		.loc 1 213 1
 310 00bc 83308104 		ld	ra,72(sp)
 311              		.cfi_remember_state
 312              		.cfi_restore 1
 313 00c0 03340104 		ld	s0,64(sp)
 314              		.cfi_restore 8
 315              		.cfi_def_cfa 2, 80
 316 00c4 83348103 		ld	s1,56(sp)
 317              		.cfi_restore 9
 318 00c8 13010105 		addi	sp,sp,80
 319              		.cfi_def_cfa_offset 0
 320 00cc 67800000 		jr	ra
 321              	.LVL10:
 322              	.L21:
 323              		.cfi_restore_state
 324              	.LBB49:
 325              	.LBB48:
 326              	.LBB47:
  42:src/riscv.cpp ****                 void* ptr;
 327              		.loc 1 42 13 is_stmt 1
  43:src/riscv.cpp ****                 int ret;
 328              		.loc 1 43 17
  44:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (ptr));
 329              		.loc 1 44 17
  45:src/riscv.cpp ****                 ret = MemoryAllocator::mem_free(ptr);
 330              		.loc 1 45 17
  45:src/riscv.cpp ****                 ret = MemoryAllocator::mem_free(ptr);
 331              		.loc 1 45 59 is_stmt 0
 332              	#APP
 333              	# 45 "src/riscv.cpp" 1
 334              		mv a0, a1
 335              	# 0 "" 2
 336              	.LVL11:
GAS LISTING /tmp/ccXEx6sp.s 			page 14


  46:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r"(ret));
 337              		.loc 1 46 17 is_stmt 1
  46:src/riscv.cpp ****                 __asm__ volatile("mv a0, %0" : : "r"(ret));
 338              		.loc 1 46 48 is_stmt 0
 339              	#NO_APP
 340 00d4 97000000 		call	_ZN15MemoryAllocator8mem_freeEPv@plt
 340      E7800000 
 341              	.LVL12:
  47:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
 342              		.loc 1 47 17 is_stmt 1
  47:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
 343              		.loc 1 47 59 is_stmt 0
 344              	#APP
 345              	# 47 "src/riscv.cpp" 1
  48:src/riscv.cpp ****                 break;
 346              		mv a0, a0
 347              	# 0 "" 2
 348              		.loc 1 48 17 is_stmt 1
  48:src/riscv.cpp ****                 break;
 349              		.loc 1 48 51 is_stmt 0
 350              	# 48 "src/riscv.cpp" 1
  49:src/riscv.cpp **** 
 351              		sd a0, 80(fp)
 352              	# 0 "" 2
 353              		.loc 1 49 17 is_stmt 1
 354              	#NO_APP
 355 00e4 6FF09FFC 		j	.L5
 356              	.LVL13:
 357              	.L20:
  52:src/riscv.cpp ****                 TCB* tcb;
 358              		.loc 1 52 13
  53:src/riscv.cpp ****                 __asm__ volatile("mv %0, a1" : "=r" (tcb));
 359              		.loc 1 53 17
  54:src/riscv.cpp ****                 TCB::start(tcb);
 360              		.loc 1 54 17
  54:src/riscv.cpp ****                 TCB::start(tcb);
 361              		.loc 1 54 59 is_stmt 0
 362              	#APP
 363              	# 54 "src/riscv.cpp" 1
 364              		mv a0, a1
 365              	# 0 "" 2
 366              	.LVL14:
  55:src/riscv.cpp ****                 break;
 367              		.loc 1 55 17 is_stmt 1
 368              	#NO_APP
 369              	.LBB35:
 370              	.LBB36:
 371              		.file 3 "src/../h/tcb.hpp"
   1:src/../h/tcb.hpp **** 
   2:src/../h/tcb.hpp **** #ifndef PROJECT_V1_1_TCB_HPP
   3:src/../h/tcb.hpp **** #define PROJECT_V1_1_TCB_HPP
   4:src/../h/tcb.hpp **** 
   5:src/../h/tcb.hpp **** #include "../lib/hw.h"
   6:src/../h/tcb.hpp **** #include "scheduler.hpp"
   7:src/../h/tcb.hpp **** #include "memoryAllocator.hpp"
   8:src/../h/tcb.hpp **** 
   9:src/../h/tcb.hpp **** 
GAS LISTING /tmp/ccXEx6sp.s 			page 15


  10:src/../h/tcb.hpp **** class TCB
  11:src/../h/tcb.hpp **** {
  12:src/../h/tcb.hpp **** public:
  13:src/../h/tcb.hpp ****     ~TCB() { delete[] stack; }
  14:src/../h/tcb.hpp **** 
  15:src/../h/tcb.hpp ****     bool isFinished() const { return finished; }
  16:src/../h/tcb.hpp **** 
  17:src/../h/tcb.hpp ****     void setFinished(bool value) { finished = value; }
  18:src/../h/tcb.hpp **** 
  19:src/../h/tcb.hpp ****     bool isBlocked() const { return this->blocked; }
  20:src/../h/tcb.hpp **** 
  21:src/../h/tcb.hpp ****     void setBlocked(bool value) { this->blocked = value; }
  22:src/../h/tcb.hpp **** 
  23:src/../h/tcb.hpp ****     bool isMain() const { return this->main; }
  24:src/../h/tcb.hpp **** 
  25:src/../h/tcb.hpp ****     //mod
  26:src/../h/tcb.hpp ****     int getId() const { return id; }
  27:src/../h/tcb.hpp **** 
  28:src/../h/tcb.hpp ****     bool isPairSync() const { return pairSync; }
  29:src/../h/tcb.hpp **** 
  30:src/../h/tcb.hpp ****     bool isCalled() const { return called; }
  31:src/../h/tcb.hpp **** 
  32:src/../h/tcb.hpp ****     void setMyPair(TCB *myPair) { this->myPair = myPair; }
  33:src/../h/tcb.hpp **** 
  34:src/../h/tcb.hpp ****     void synchronizeTCB();
  35:src/../h/tcb.hpp **** 
  36:src/../h/tcb.hpp ****     void setPairSync() { pairSync = true; }
  37:src/../h/tcb.hpp **** 
  38:src/../h/tcb.hpp ****     using Body = void (*)(void*);
  39:src/../h/tcb.hpp **** 
  40:src/../h/tcb.hpp ****     static TCB *createThread(Body body, void* arg);
  41:src/../h/tcb.hpp **** 
  42:src/../h/tcb.hpp ****     static TCB *initThread(Body body, void* arg);
  43:src/../h/tcb.hpp **** 
  44:src/../h/tcb.hpp ****     static void start(TCB* tcb) { Scheduler::put(tcb);}
 372              		.loc 3 44 35
 373              		.loc 3 44 49 is_stmt 0
 374 00ec 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 374      E7800000 
 375              	.LVL15:
 376              		.loc 3 44 55
 377 00f4 6FF09FFB 		j	.L5
 378              	.L19:
 379              	.LBE36:
 380              	.LBE35:
  59:src/riscv.cpp ****                 TCB** handleInit;
 381              		.loc 1 59 13 is_stmt 1
  60:src/riscv.cpp ****                 Body bodyInit;
 382              		.loc 1 60 17
  61:src/riscv.cpp ****                 void* argInit;
 383              		.loc 1 61 17
  62:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handleInit));
 384              		.loc 1 62 17
  63:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (bodyInit));
 385              		.loc 1 63 17
  63:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (bodyInit));
 386              		.loc 1 63 67 is_stmt 0
GAS LISTING /tmp/ccXEx6sp.s 			page 16


 387              	#APP
 388              	# 63 "src/riscv.cpp" 1
 389              		mv s1, a1
 390              	# 0 "" 2
 391              	.LVL16:
  64:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a6" : "=r" (argInit));
 392              		.loc 1 64 17 is_stmt 1
  64:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a6" : "=r" (argInit));
 393              		.loc 1 64 65 is_stmt 0
 394              	# 64 "src/riscv.cpp" 1
 395              		mv a0, a2
 396              	# 0 "" 2
 397              	.LVL17:
  65:src/riscv.cpp ****                 *handleInit = TCB::initThread(bodyInit, argInit);
 398              		.loc 1 65 17 is_stmt 1
  65:src/riscv.cpp ****                 *handleInit = TCB::initThread(bodyInit, argInit);
 399              		.loc 1 65 64 is_stmt 0
 400              	# 65 "src/riscv.cpp" 1
 401              		mv a1, a6
 402              	# 0 "" 2
 403              	.LVL18:
  66:src/riscv.cpp ****                 if(*handleInit != nullptr) {
 404              		.loc 1 66 17 is_stmt 1
  66:src/riscv.cpp ****                 if(*handleInit != nullptr) {
 405              		.loc 1 66 46 is_stmt 0
 406              	#NO_APP
 407 0104 97000000 		call	_ZN3TCB10initThreadEPFvPvES0_@plt
 407      E7800000 
 408              	.LVL19:
  66:src/riscv.cpp ****                 if(*handleInit != nullptr) {
 409              		.loc 1 66 29
 410 010c 23B0A400 		sd	a0,0(s1)
  67:src/riscv.cpp ****                     __asm__ volatile ("li a0, 0");
 411              		.loc 1 67 17 is_stmt 1
 412 0110 63080500 		beqz	a0,.L23
  68:src/riscv.cpp ****                     __asm__ volatile ("sd a0, 80(fp)");
 413              		.loc 1 68 21
  68:src/riscv.cpp ****                     __asm__ volatile ("sd a0, 80(fp)");
 414              		.loc 1 68 50 is_stmt 0
 415              	#APP
 416              	# 68 "src/riscv.cpp" 1
  69:src/riscv.cpp ****                 }
 417              		li a0, 0
 418              	# 0 "" 2
 419              		.loc 1 69 21 is_stmt 1
  69:src/riscv.cpp ****                 }
 420              		.loc 1 69 55 is_stmt 0
 421              	# 69 "src/riscv.cpp" 1
 422              		sd a0, 80(fp)
 423              	# 0 "" 2
 424              	#NO_APP
 425 011c 6FF01FF9 		j	.L5
 426              	.L23:
  72:src/riscv.cpp ****                     __asm__ volatile ("sd a0, 80(fp)");
 427              		.loc 1 72 21 is_stmt 1
  72:src/riscv.cpp ****                     __asm__ volatile ("sd a0, 80(fp)");
 428              		.loc 1 72 51 is_stmt 0
GAS LISTING /tmp/ccXEx6sp.s 			page 17


 429              	#APP
 430              	# 72 "src/riscv.cpp" 1
  73:src/riscv.cpp ****                 }
 431              		li a0, -1
 432              	# 0 "" 2
 433              		.loc 1 73 21 is_stmt 1
  73:src/riscv.cpp ****                 }
 434              		.loc 1 73 55 is_stmt 0
 435              	# 73 "src/riscv.cpp" 1
 436              		sd a0, 80(fp)
 437              	# 0 "" 2
 438              	#NO_APP
 439 0128 6FF05FF8 		j	.L5
 440              	.LVL20:
 441              	.L18:
  78:src/riscv.cpp ****                 TCB** handle;
 442              		.loc 1 78 13 is_stmt 1
  79:src/riscv.cpp ****                 Body body;
 443              		.loc 1 79 17
  80:src/riscv.cpp ****                 void* arg;
 444              		.loc 1 80 17
  81:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (handle));
 445              		.loc 1 81 17
  82:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
 446              		.loc 1 82 17
  82:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (body));
 447              		.loc 1 82 63 is_stmt 0
 448              	#APP
 449              	# 82 "src/riscv.cpp" 1
 450              		mv s1, a1
 451              	# 0 "" 2
 452              	.LVL21:
  83:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a6" : "=r" (arg));
 453              		.loc 1 83 17 is_stmt 1
  83:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a6" : "=r" (arg));
 454              		.loc 1 83 61 is_stmt 0
 455              	# 83 "src/riscv.cpp" 1
 456              		mv a0, a2
 457              	# 0 "" 2
 458              	.LVL22:
  84:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg);
 459              		.loc 1 84 17 is_stmt 1
  84:src/riscv.cpp ****                 *handle = TCB::createThread(body, arg);
 460              		.loc 1 84 60 is_stmt 0
 461              	# 84 "src/riscv.cpp" 1
 462              		mv a1, a6
 463              	# 0 "" 2
 464              	.LVL23:
  85:src/riscv.cpp ****                 if(*handle != nullptr) {
 465              		.loc 1 85 17 is_stmt 1
  85:src/riscv.cpp ****                 if(*handle != nullptr) {
 466              		.loc 1 85 44 is_stmt 0
 467              	#NO_APP
 468 0138 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_@plt
 468      E7800000 
 469              	.LVL24:
  85:src/riscv.cpp ****                 if(*handle != nullptr) {
GAS LISTING /tmp/ccXEx6sp.s 			page 18


 470              		.loc 1 85 25
 471 0140 23B0A400 		sd	a0,0(s1)
  86:src/riscv.cpp ****                     __asm__ volatile ("li a0, 0");
 472              		.loc 1 86 17 is_stmt 1
 473 0144 63080500 		beqz	a0,.L24
  87:src/riscv.cpp ****                     __asm__ volatile ("sd a0, 80(fp)");
 474              		.loc 1 87 21
  87:src/riscv.cpp ****                     __asm__ volatile ("sd a0, 80(fp)");
 475              		.loc 1 87 50 is_stmt 0
 476              	#APP
 477              	# 87 "src/riscv.cpp" 1
  88:src/riscv.cpp ****                 }
 478              		li a0, 0
 479              	# 0 "" 2
 480              		.loc 1 88 21 is_stmt 1
  88:src/riscv.cpp ****                 }
 481              		.loc 1 88 55 is_stmt 0
 482              	# 88 "src/riscv.cpp" 1
 483              		sd a0, 80(fp)
 484              	# 0 "" 2
 485              	#NO_APP
 486 0150 6FF0DFF5 		j	.L5
 487              	.L24:
  91:src/riscv.cpp ****                     __asm__ volatile ("sd a0, 80(fp)");
 488              		.loc 1 91 21 is_stmt 1
  91:src/riscv.cpp ****                     __asm__ volatile ("sd a0, 80(fp)");
 489              		.loc 1 91 51 is_stmt 0
 490              	#APP
 491              	# 91 "src/riscv.cpp" 1
  92:src/riscv.cpp ****                 }
 492              		li a0, -1
 493              	# 0 "" 2
 494              		.loc 1 92 21 is_stmt 1
  92:src/riscv.cpp ****                 }
 495              		.loc 1 92 55 is_stmt 0
 496              	# 92 "src/riscv.cpp" 1
 497              		sd a0, 80(fp)
 498              	# 0 "" 2
 499              	#NO_APP
 500 015c 6FF01FF5 		j	.L5
 501              	.LVL25:
 502              	.L17:
  97:src/riscv.cpp ****                 TCB::running->setFinished(true);
 503              		.loc 1 97 13 is_stmt 1
  98:src/riscv.cpp ****                 TCB::dispatch();
 504              		.loc 1 98 17
  98:src/riscv.cpp ****                 TCB::dispatch();
 505              		.loc 1 98 42 is_stmt 0
 506 0160 97070000 		la	a5,_ZN3TCB7runningE
 506      83B70700 
 507 0168 83B70700 		ld	a5,0(a5)
 508              	.LVL26:
 509              	.LBB37:
 510              	.LBB38:
  17:src/../h/tcb.hpp **** 
 511              		.loc 3 17 36 is_stmt 1
  17:src/../h/tcb.hpp **** 
GAS LISTING /tmp/ccXEx6sp.s 			page 19


 512              		.loc 3 17 45 is_stmt 0
 513 016c 13071000 		li	a4,1
 514 0170 2380E702 		sb	a4,32(a5)
 515              	.LVL27:
 516              	.LBE38:
 517              	.LBE37:
  99:src/riscv.cpp ****                 __asm__ volatile ("li a0, 0");
 518              		.loc 1 99 17 is_stmt 1
  99:src/riscv.cpp ****                 __asm__ volatile ("li a0, 0");
 519              		.loc 1 99 30 is_stmt 0
 520 0174 97000000 		call	_ZN3TCB8dispatchEv@plt
 520      E7800000 
 521              	.LVL28:
 100:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
 522              		.loc 1 100 17 is_stmt 1
 100:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
 523              		.loc 1 100 46 is_stmt 0
 524              	#APP
 525              	# 100 "src/riscv.cpp" 1
 101:src/riscv.cpp ****                 break;
 526              		li a0, 0
 527              	# 0 "" 2
 528              		.loc 1 101 17 is_stmt 1
 101:src/riscv.cpp ****                 break;
 529              		.loc 1 101 51 is_stmt 0
 530              	# 101 "src/riscv.cpp" 1
 102:src/riscv.cpp **** 
 531              		sd a0, 80(fp)
 532              	# 0 "" 2
 533              		.loc 1 102 17 is_stmt 1
 534              	#NO_APP
 535 0184 6FF09FF2 		j	.L5
 536              	.L16:
 105:src/riscv.cpp ****                 TCB::dispatch();
 537              		.loc 1 105 13
 106:src/riscv.cpp ****                 break;
 538              		.loc 1 106 17
 106:src/riscv.cpp ****                 break;
 539              		.loc 1 106 30 is_stmt 0
 540 0188 97000000 		call	_ZN3TCB8dispatchEv@plt
 540      E7800000 
 541              	.LVL29:
 107:src/riscv.cpp **** 
 542              		.loc 1 107 17 is_stmt 1
 543 0190 6FF0DFF1 		j	.L5
 544              	.L15:
 110:src/riscv.cpp ****                 SyncSemaphore** sem;
 545              		.loc 1 110 13
 111:src/riscv.cpp ****                 unsigned semValue;
 546              		.loc 1 111 17
 112:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (sem));
 547              		.loc 1 112 17
 113:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (semValue));
 548              		.loc 1 113 17
 113:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (semValue));
 549              		.loc 1 113 60 is_stmt 0
 550              	#APP
GAS LISTING /tmp/ccXEx6sp.s 			page 20


 551              	# 113 "src/riscv.cpp" 1
 552              		mv s1, a1
 553              	# 0 "" 2
 554              	.LVL30:
 114:src/riscv.cpp ****                 *sem = SyncSemaphore::createSyncSemaphore((int)semValue);
 555              		.loc 1 114 17 is_stmt 1
 114:src/riscv.cpp ****                 *sem = SyncSemaphore::createSyncSemaphore((int)semValue);
 556              		.loc 1 114 65 is_stmt 0
 557              	# 114 "src/riscv.cpp" 1
 558              		mv a0, a2
 559              	# 0 "" 2
 560              	.LVL31:
 115:src/riscv.cpp ****                 if(*sem != nullptr) {
 561              		.loc 1 115 17 is_stmt 1
 115:src/riscv.cpp ****                 if(*sem != nullptr) {
 562              		.loc 1 115 58 is_stmt 0
 563              	#NO_APP
 564 019c 1B050500 		sext.w	a0,a0
 565 01a0 97000000 		call	_ZN13SyncSemaphore19createSyncSemaphoreEi@plt
 565      E7800000 
 566              	.LVL32:
 115:src/riscv.cpp ****                 if(*sem != nullptr) {
 567              		.loc 1 115 22
 568 01a8 23B0A400 		sd	a0,0(s1)
 116:src/riscv.cpp ****                     __asm__ volatile ("li a0, 0");
 569              		.loc 1 116 17 is_stmt 1
 570 01ac 63080500 		beqz	a0,.L25
 117:src/riscv.cpp ****                     __asm__ volatile ("sd a0, 80(fp)");
 571              		.loc 1 117 21
 117:src/riscv.cpp ****                     __asm__ volatile ("sd a0, 80(fp)");
 572              		.loc 1 117 50 is_stmt 0
 573              	#APP
 574              	# 117 "src/riscv.cpp" 1
 118:src/riscv.cpp ****                 }
 575              		li a0, 0
 576              	# 0 "" 2
 577              		.loc 1 118 21 is_stmt 1
 118:src/riscv.cpp ****                 }
 578              		.loc 1 118 55 is_stmt 0
 579              	# 118 "src/riscv.cpp" 1
 580              		sd a0, 80(fp)
 581              	# 0 "" 2
 582              	#NO_APP
 583 01b8 6FF05FEF 		j	.L5
 584              	.L25:
 121:src/riscv.cpp ****                     __asm__ volatile ("sd a0, 80(fp)");
 585              		.loc 1 121 21 is_stmt 1
 121:src/riscv.cpp ****                     __asm__ volatile ("sd a0, 80(fp)");
 586              		.loc 1 121 51 is_stmt 0
 587              	#APP
 588              	# 121 "src/riscv.cpp" 1
 122:src/riscv.cpp ****                 }
 589              		li a0, -1
 590              	# 0 "" 2
 591              		.loc 1 122 21 is_stmt 1
 122:src/riscv.cpp ****                 }
 592              		.loc 1 122 55 is_stmt 0
GAS LISTING /tmp/ccXEx6sp.s 			page 21


 593              	# 122 "src/riscv.cpp" 1
 594              		sd a0, 80(fp)
 595              	# 0 "" 2
 596              	#NO_APP
 597 01c4 6FF09FEE 		j	.L5
 598              	.LVL33:
 599              	.L14:
 127:src/riscv.cpp ****                 int retClose;
 600              		.loc 1 127 13 is_stmt 1
 128:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (semHandle));
 601              		.loc 1 128 17
 129:src/riscv.cpp ****                 if(semHandle!= nullptr) retClose = semHandle->close();
 602              		.loc 1 129 17
 129:src/riscv.cpp ****                 if(semHandle!= nullptr) retClose = semHandle->close();
 603              		.loc 1 129 66 is_stmt 0
 604              	#APP
 605              	# 129 "src/riscv.cpp" 1
 606              		mv a0, a1
 607              	# 0 "" 2
 608              	.LVL34:
 130:src/riscv.cpp ****                 else retClose = -2;
 609              		.loc 1 130 17 is_stmt 1
 610              	#NO_APP
 611 01cc 630C0500 		beqz	a0,.L31
 130:src/riscv.cpp ****                 else retClose = -2;
 612              		.loc 1 130 41 discriminator 1
 130:src/riscv.cpp ****                 else retClose = -2;
 613              		.loc 1 130 68 is_stmt 0 discriminator 1
 614 01d0 97000000 		call	_ZN13SyncSemaphore5closeEv@plt
 614      E7800000 
 615              	.LVL35:
 616              	.L26:
 132:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
 617              		.loc 1 132 17 is_stmt 1
 132:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
 618              		.loc 1 132 65 is_stmt 0
 619              	#APP
 620              	# 132 "src/riscv.cpp" 1
 133:src/riscv.cpp ****                 break;
 621              		mv a0, a0
 622              	# 0 "" 2
 623              		.loc 1 133 17 is_stmt 1
 133:src/riscv.cpp ****                 break;
 624              		.loc 1 133 51 is_stmt 0
 625              	# 133 "src/riscv.cpp" 1
 134:src/riscv.cpp **** 
 626              		sd a0, 80(fp)
 627              	# 0 "" 2
 628              		.loc 1 134 17 is_stmt 1
 629              	#NO_APP
 630 01e0 6FF0DFEC 		j	.L5
 631              	.LVL36:
 632              	.L31:
 131:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r"(retClose));
 633              		.loc 1 131 31 is_stmt 0
 634 01e4 1305E0FF 		li	a0,-2
 635              	.LVL37:
GAS LISTING /tmp/ccXEx6sp.s 			page 22


 636 01e8 6FF01FFF 		j	.L26
 637              	.L13:
 137:src/riscv.cpp ****                 int retWait;
 638              		.loc 1 137 13 is_stmt 1
 138:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (semHandle));
 639              		.loc 1 138 17
 139:src/riscv.cpp ****                 if(semHandle!= nullptr) retWait = semHandle->wait();
 640              		.loc 1 139 17
 139:src/riscv.cpp ****                 if(semHandle!= nullptr) retWait = semHandle->wait();
 641              		.loc 1 139 66 is_stmt 0
 642              	#APP
 643              	# 139 "src/riscv.cpp" 1
 644              		mv a0, a1
 645              	# 0 "" 2
 646              	.LVL38:
 140:src/riscv.cpp ****                 else retWait = -2;
 647              		.loc 1 140 17 is_stmt 1
 648              	#NO_APP
 649 01f0 630C0500 		beqz	a0,.L32
 140:src/riscv.cpp ****                 else retWait = -2;
 650              		.loc 1 140 41 discriminator 1
 140:src/riscv.cpp ****                 else retWait = -2;
 651              		.loc 1 140 66 is_stmt 0 discriminator 1
 652 01f4 97000000 		call	_ZN13SyncSemaphore4waitEv@plt
 652      E7800000 
 653              	.LVL39:
 654              	.L27:
 142:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
 655              		.loc 1 142 17 is_stmt 1
 142:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
 656              		.loc 1 142 64 is_stmt 0
 657              	#APP
 658              	# 142 "src/riscv.cpp" 1
 143:src/riscv.cpp ****                 break;
 659              		mv a0, a0
 660              	# 0 "" 2
 661              		.loc 1 143 17 is_stmt 1
 143:src/riscv.cpp ****                 break;
 662              		.loc 1 143 51 is_stmt 0
 663              	# 143 "src/riscv.cpp" 1
 144:src/riscv.cpp **** 
 664              		sd a0, 80(fp)
 665              	# 0 "" 2
 666              		.loc 1 144 17 is_stmt 1
 667              	#NO_APP
 668 0204 6FF09FEA 		j	.L5
 669              	.LVL40:
 670              	.L32:
 141:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r"(retWait));
 671              		.loc 1 141 30 is_stmt 0
 672 0208 1305E0FF 		li	a0,-2
 673              	.LVL41:
 674 020c 6FF01FFF 		j	.L27
 675              	.L12:
 147:src/riscv.cpp ****                 int retSignal;
 676              		.loc 1 147 13 is_stmt 1
 148:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (semHandle));
GAS LISTING /tmp/ccXEx6sp.s 			page 23


 677              		.loc 1 148 17
 149:src/riscv.cpp ****                 if(semHandle!= nullptr) retSignal = semHandle->signal();
 678              		.loc 1 149 17
 149:src/riscv.cpp ****                 if(semHandle!= nullptr) retSignal = semHandle->signal();
 679              		.loc 1 149 66 is_stmt 0
 680              	#APP
 681              	# 149 "src/riscv.cpp" 1
 682              		mv a0, a1
 683              	# 0 "" 2
 684              	.LVL42:
 150:src/riscv.cpp ****                 else retSignal = -2;
 685              		.loc 1 150 17 is_stmt 1
 686              	#NO_APP
 687 0214 630C0500 		beqz	a0,.L33
 150:src/riscv.cpp ****                 else retSignal = -2;
 688              		.loc 1 150 41 discriminator 1
 150:src/riscv.cpp ****                 else retSignal = -2;
 689              		.loc 1 150 70 is_stmt 0 discriminator 1
 690 0218 97000000 		call	_ZN13SyncSemaphore6signalEv@plt
 690      E7800000 
 691              	.LVL43:
 692              	.L28:
 152:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
 693              		.loc 1 152 17 is_stmt 1
 152:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
 694              		.loc 1 152 66 is_stmt 0
 695              	#APP
 696              	# 152 "src/riscv.cpp" 1
 153:src/riscv.cpp ****                 break;
 697              		mv a0, a0
 698              	# 0 "" 2
 699              		.loc 1 153 17 is_stmt 1
 153:src/riscv.cpp ****                 break;
 700              		.loc 1 153 51 is_stmt 0
 701              	# 153 "src/riscv.cpp" 1
 154:src/riscv.cpp **** 
 702              		sd a0, 80(fp)
 703              	# 0 "" 2
 704              		.loc 1 154 17 is_stmt 1
 705              	#NO_APP
 706 0228 6FF05FE8 		j	.L5
 707              	.LVL44:
 708              	.L33:
 151:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r"(retSignal));
 709              		.loc 1 151 32 is_stmt 0
 710 022c 1305E0FF 		li	a0,-2
 711              	.LVL45:
 712 0230 6FF01FFF 		j	.L28
 713              	.L11:
 157:src/riscv.cpp ****                 int retTryWait;
 714              		.loc 1 157 13 is_stmt 1
 158:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (semHandle));
 715              		.loc 1 158 17
 159:src/riscv.cpp ****                 if(semHandle!= nullptr) retTryWait = semHandle->wait();
 716              		.loc 1 159 17
 159:src/riscv.cpp ****                 if(semHandle!= nullptr) retTryWait = semHandle->wait();
 717              		.loc 1 159 66 is_stmt 0
GAS LISTING /tmp/ccXEx6sp.s 			page 24


 718              	#APP
 719              	# 159 "src/riscv.cpp" 1
 720              		mv a0, a1
 721              	# 0 "" 2
 722              	.LVL46:
 160:src/riscv.cpp ****                 else retTryWait = -2;
 723              		.loc 1 160 17 is_stmt 1
 724              	#NO_APP
 725 0238 630C0500 		beqz	a0,.L34
 160:src/riscv.cpp ****                 else retTryWait = -2;
 726              		.loc 1 160 41 discriminator 1
 160:src/riscv.cpp ****                 else retTryWait = -2;
 727              		.loc 1 160 69 is_stmt 0 discriminator 1
 728 023c 97000000 		call	_ZN13SyncSemaphore4waitEv@plt
 728      E7800000 
 729              	.LVL47:
 730              	.L29:
 162:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
 731              		.loc 1 162 17 is_stmt 1
 162:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
 732              		.loc 1 162 67 is_stmt 0
 733              	#APP
 734              	# 162 "src/riscv.cpp" 1
 163:src/riscv.cpp ****                 break;
 735              		mv a0, a0
 736              	# 0 "" 2
 737              		.loc 1 163 17 is_stmt 1
 163:src/riscv.cpp ****                 break;
 738              		.loc 1 163 51 is_stmt 0
 739              	# 163 "src/riscv.cpp" 1
 164:src/riscv.cpp **** 
 740              		sd a0, 80(fp)
 741              	# 0 "" 2
 742              		.loc 1 164 17 is_stmt 1
 743              	#NO_APP
 744 024c 6FF01FE6 		j	.L5
 745              	.LVL48:
 746              	.L34:
 161:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r"(retTryWait));
 747              		.loc 1 161 33 is_stmt 0
 748 0250 1305E0FF 		li	a0,-2
 749              	.LVL49:
 750 0254 6FF01FFF 		j	.L29
 751              	.L10:
 167:src/riscv.cpp ****                 int retGet;
 752              		.loc 1 167 13 is_stmt 1
 168:src/riscv.cpp ****                 retGet = __getc();
 753              		.loc 1 168 17
 169:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r"(retGet));
 754              		.loc 1 169 17
 169:src/riscv.cpp ****                 __asm__ volatile ("mv a0, %0" : : "r"(retGet));
 755              		.loc 1 169 32 is_stmt 0
 756 0258 97000000 		call	__getc@plt
 756      E7800000 
 757              	.LVL50:
 170:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
 758              		.loc 1 170 17 is_stmt 1
GAS LISTING /tmp/ccXEx6sp.s 			page 25


 170:src/riscv.cpp ****                 __asm__ volatile ("sd a0, 80(fp)");
 759              		.loc 1 170 63 is_stmt 0
 760              	#APP
 761              	# 170 "src/riscv.cpp" 1
 171:src/riscv.cpp ****                 break;
 762              		mv a0, a0
 763              	# 0 "" 2
 764              		.loc 1 171 17 is_stmt 1
 171:src/riscv.cpp ****                 break;
 765              		.loc 1 171 51 is_stmt 0
 766              	# 171 "src/riscv.cpp" 1
 172:src/riscv.cpp **** 
 767              		sd a0, 80(fp)
 768              	# 0 "" 2
 769              		.loc 1 172 17 is_stmt 1
 770              	#NO_APP
 771 0268 6FF05FE4 		j	.L5
 772              	.LVL51:
 773              	.L9:
 175:src/riscv.cpp ****                 char c;
 774              		.loc 1 175 13
 176:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (c));
 775              		.loc 1 176 17
 177:src/riscv.cpp ****                 __putc(c);
 776              		.loc 1 177 17
 177:src/riscv.cpp ****                 __putc(c);
 777              		.loc 1 177 58 is_stmt 0
 778              	#APP
 779              	# 177 "src/riscv.cpp" 1
 780              		mv a0, a1
 781              	# 0 "" 2
 782              	.LVL52:
 178:src/riscv.cpp ****                 break;
 783              		.loc 1 178 17 is_stmt 1
 178:src/riscv.cpp ****                 break;
 784              		.loc 1 178 23 is_stmt 0
 785              	#NO_APP
 786 0270 1375F50F 		andi	a0,a0,0xff
 787 0274 97000000 		call	__putc@plt
 787      E7800000 
 788              	.LVL53:
 179:src/riscv.cpp **** 
 789              		.loc 1 179 17 is_stmt 1
 790 027c 6FF01FE3 		j	.L5
 791              	.L8:
 182:src/riscv.cpp ****                 TCB* t1;
 792              		.loc 1 182 13
 183:src/riscv.cpp ****                 TCB* t2;
 793              		.loc 1 183 17
 184:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (t1));
 794              		.loc 1 184 17
 185:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (t2));
 795              		.loc 1 185 17
 185:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a2" : "=r" (t2));
 796              		.loc 1 185 59 is_stmt 0
 797              	#APP
 798              	# 185 "src/riscv.cpp" 1
GAS LISTING /tmp/ccXEx6sp.s 			page 26


 799              		mv a4, a1
 800              	# 0 "" 2
 801              	.LVL54:
 186:src/riscv.cpp ****                 t1->setMyPair(t2);
 802              		.loc 1 186 17 is_stmt 1
 186:src/riscv.cpp ****                 t1->setMyPair(t2);
 803              		.loc 1 186 59 is_stmt 0
 804              	# 186 "src/riscv.cpp" 1
 805              		mv a5, a2
 806              	# 0 "" 2
 807              	.LVL55:
 187:src/riscv.cpp ****                 t2->setMyPair(t1);
 808              		.loc 1 187 17 is_stmt 1
 809              	#NO_APP
 810              	.LBB39:
 811              	.LBB40:
  32:src/../h/tcb.hpp **** 
 812              		.loc 3 32 35
  32:src/../h/tcb.hpp **** 
 813              		.loc 3 32 48 is_stmt 0
 814 0288 2330F704 		sd	a5,64(a4)
 815              	.LVL56:
 816              	.LBE40:
 817              	.LBE39:
 188:src/riscv.cpp ****                 break;
 818              		.loc 1 188 17 is_stmt 1
 819              	.LBB41:
 820              	.LBB42:
  32:src/../h/tcb.hpp **** 
 821              		.loc 3 32 35
  32:src/../h/tcb.hpp **** 
 822              		.loc 3 32 48 is_stmt 0
 823 028c 23B0E704 		sd	a4,64(a5)
  32:src/../h/tcb.hpp **** 
 824              		.loc 3 32 58
 825 0290 6FF0DFE1 		j	.L5
 826              	.LVL57:
 827              	.L6:
 828              	.LBE42:
 829              	.LBE41:
 192:src/riscv.cpp ****                 TCB* t;
 830              		.loc 1 192 13 is_stmt 1
 193:src/riscv.cpp ****                 __asm__ volatile ("mv %0, a1" : "=r" (t));
 831              		.loc 1 193 17
 194:src/riscv.cpp ****                 t->synchronizeTCB();
 832              		.loc 1 194 17
 194:src/riscv.cpp ****                 t->synchronizeTCB();
 833              		.loc 1 194 58 is_stmt 0
 834              	#APP
 835              	# 194 "src/riscv.cpp" 1
 836              		mv a0, a1
 837              	# 0 "" 2
 838              	.LVL58:
 195:src/riscv.cpp ****                 break;
 839              		.loc 1 195 17 is_stmt 1
 195:src/riscv.cpp ****                 break;
 840              		.loc 1 195 34 is_stmt 0
GAS LISTING /tmp/ccXEx6sp.s 			page 27


 841              	#NO_APP
 842 0298 97000000 		call	_ZN3TCB14synchronizeTCBEv@plt
 842      E7800000 
 843              	.LVL59:
 196:src/riscv.cpp **** 
 844              		.loc 1 196 17 is_stmt 1
 845 02a0 6FF0DFE0 		j	.L5
 846              	.L4:
 847              	.LBE47:
 848              	.LBE48:
 207:src/riscv.cpp ****         printInt(scause);
 849              		.loc 1 207 9
 207:src/riscv.cpp ****         printInt(scause);
 850              		.loc 1 207 20 is_stmt 0
 851 02a4 17050000 		lla	a0,.LC0
 851      13050500 
 852 02ac 97000000 		call	_Z11printStringPKc@plt
 852      E7800000 
 853              	.LVL60:
 208:src/riscv.cpp ****         printString("\n");
 854              		.loc 1 208 9 is_stmt 1
 208:src/riscv.cpp ****         printString("\n");
 855              		.loc 1 208 17 is_stmt 0
 856 02b4 13060000 		li	a2,0
 857 02b8 9305A000 		li	a1,10
 858 02bc 1B850400 		sext.w	a0,s1
 859 02c0 97000000 		call	_Z8printIntiii@plt
 859      E7800000 
 860              	.LVL61:
 209:src/riscv.cpp ****         //while(true) {};
 861              		.loc 1 209 9 is_stmt 1
 209:src/riscv.cpp ****         //while(true) {};
 862              		.loc 1 209 20 is_stmt 0
 863 02c8 17050000 		lla	a0,.LC1
 863      13050500 
 864 02d0 97000000 		call	_Z11printStringPKc@plt
 864      E7800000 
 865              	.LVL62:
 866              	.LBE49:
 867              		.loc 1 213 1
 868 02d8 6FF05FDE 		j	.L3
 869              		.cfi_endproc
 870              	.LFE46:
 872              		.align	2
 873              		.globl	_ZN5Riscv22handleConsoleInterruptEv
 875              	_ZN5Riscv22handleConsoleInterruptEv:
 876              	.LFB47:
 214:src/riscv.cpp **** 
 215:src/riscv.cpp **** void Riscv::handleConsoleInterrupt() {
 877              		.loc 1 215 38 is_stmt 1
 878              		.cfi_startproc
 879 02dc 130101FF 		addi	sp,sp,-16
 880              		.cfi_def_cfa_offset 16
 881 02e0 23341100 		sd	ra,8(sp)
 882 02e4 23308100 		sd	s0,0(sp)
 883              		.cfi_offset 1, -8
 884              		.cfi_offset 8, -16
GAS LISTING /tmp/ccXEx6sp.s 			page 28


 885 02e8 13040101 		addi	s0,sp,16
 886              		.cfi_def_cfa 8, 0
 216:src/riscv.cpp ****     console_handler();
 887              		.loc 1 216 5
 888              		.loc 1 216 20 is_stmt 0
 889 02ec 97000000 		call	console_handler@plt
 889      E7800000 
 890              	.LVL63:
 217:src/riscv.cpp **** }
 891              		.loc 1 217 1
 892 02f4 83308100 		ld	ra,8(sp)
 893              		.cfi_restore 1
 894 02f8 03340100 		ld	s0,0(sp)
 895              		.cfi_restore 8
 896              		.cfi_def_cfa 2, 16
 897 02fc 13010101 		addi	sp,sp,16
 898              		.cfi_def_cfa_offset 0
 899 0300 67800000 		jr	ra
 900              		.cfi_endproc
 901              	.LFE47:
 903              		.align	2
 904              		.globl	_ZN5Riscv20handleTimerInterruptEv
 906              	_ZN5Riscv20handleTimerInterruptEv:
 907              	.LFB48:
 218:src/riscv.cpp **** 
 219:src/riscv.cpp **** void Riscv::handleTimerInterrupt() {
 908              		.loc 1 219 36 is_stmt 1
 909              		.cfi_startproc
 910 0304 130101FF 		addi	sp,sp,-16
 911              		.cfi_def_cfa_offset 16
 912 0308 23348100 		sd	s0,8(sp)
 913              		.cfi_offset 8, -8
 914 030c 13040101 		addi	s0,sp,16
 915              		.cfi_def_cfa 8, 0
 220:src/riscv.cpp ****     mc_sip(SIP_SSIP);
 916              		.loc 1 220 5
 917              	.LVL64:
 918              	.LBB50:
 919              	.LBB51:
 146:src/../h/riscv.hpp **** }
 920              		.loc 2 146 5
 146:src/../h/riscv.hpp **** }
 921              		.loc 2 146 64 is_stmt 0
 922 0310 93072000 		li	a5,2
 923              	#APP
 924              	# 146 "src/../h/riscv.hpp" 1
 925              		csrc sip, a5
 926              	# 0 "" 2
 927              	.LVL65:
 928              	#NO_APP
 929              	.LBE51:
 930              	.LBE50:
 221:src/riscv.cpp **** }...
 931              		.loc 1 221 1
 932 0318 03348100 		ld	s0,8(sp)
 933              		.cfi_restore 8
 934              		.cfi_def_cfa 2, 16
GAS LISTING /tmp/ccXEx6sp.s 			page 29


 935 031c 13010101 		addi	sp,sp,16
 936              		.cfi_def_cfa_offset 0
 937 0320 67800000 		jr	ra
 938              		.cfi_endproc
 939              	.LFE48:
 941              	.Letext0:
 942              		.file 4 "src/../h/../lib/hw.h"
 943              		.file 5 "src/../h/memoryAllocator.hpp"
 944              		.file 6 "src/../h/scheduler.hpp"
 945              		.file 7 "src/../h/list.hpp"
 946              		.file 8 "src/../test/../h/syncSemaphore.hpp"
 947              		.file 9 "src/../lib/console.h"
 948              		.file 10 "src/../test/printing.hpp"
GAS LISTING /tmp/ccXEx6sp.s 			page 30


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccXEx6sp.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccXEx6sp.s:13     .text:0000000000000000 .L0 
     /tmp/ccXEx6sp.s:14     .text:0000000000000000 .L0 
     /tmp/ccXEx6sp.s:15     .text:0000000000000004 .L0 
     /tmp/ccXEx6sp.s:17     .text:0000000000000008 .L0 
     /tmp/ccXEx6sp.s:19     .text:000000000000000c .L0 
     /tmp/ccXEx6sp.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:11     .text:000000000000000c .L0 
     /tmp/ccXEx6sp.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:12     .text:0000000000000010 .L0 
     /tmp/ccXEx6sp.s:33     .text:0000000000000014 .L0 
     /tmp/ccXEx6sp.s:34     .text:0000000000000018 .L0 
     /tmp/ccXEx6sp.s:35     .text:0000000000000018 .L0 
     /tmp/ccXEx6sp.s:37     .text:000000000000001c .L0 
     /tmp/ccXEx6sp.s:39     .text:0000000000000020 .L0 
     /tmp/ccXEx6sp.s:53     .text:0000000000000020 _ZN5Riscv23handleSoftwareInterruptEv
     /tmp/ccXEx6sp.s:56     .text:0000000000000020 .L0 
     /tmp/ccXEx6sp.s:57     .text:0000000000000020 .L0 
     /tmp/ccXEx6sp.s:58     .text:0000000000000024 .L0 
     /tmp/ccXEx6sp.s:62     .text:0000000000000030 .L0 
     /tmp/ccXEx6sp.s:63     .text:0000000000000030 .L0 
     /tmp/ccXEx6sp.s:64     .text:0000000000000030 .L0 
     /tmp/ccXEx6sp.s:66     .text:0000000000000034 .L0 
     /tmp/ccXEx6sp.s:71     .text:0000000000000034 .L0 
     /tmp/ccXEx6sp.s:72     .text:0000000000000034 .L0 
     /tmp/ccXEx6sp.s:73     .text:0000000000000034 .L0 
  src/../h/riscv.hpp:94     .text:0000000000000034 .L0 
     /tmp/ccXEx6sp.s:81     .text:000000000000003c .L0 
     /tmp/ccXEx6sp.s:82     .text:000000000000003c .L0 
     /tmp/ccXEx6sp.s:88     .text:0000000000000040 .L0 
     /tmp/ccXEx6sp.s:89     .text:0000000000000040 .L0 
     /tmp/ccXEx6sp.s:91     .text:0000000000000044 .L0 
     /tmp/ccXEx6sp.s:97     .text:000000000000004c .L0 
     /tmp/ccXEx6sp.s:98     .text:000000000000004c .L0 
     /tmp/ccXEx6sp.s:99     .text:000000000000004c .L0 
  src/../h/riscv.hpp:106    .text:000000000000004c .L0 
     /tmp/ccXEx6sp.s:107    .text:0000000000000054 .L0 
     /tmp/ccXEx6sp.s:108    .text:0000000000000054 .L0 
     /tmp/ccXEx6sp.s:112    .text:0000000000000058 .L0 
     /tmp/ccXEx6sp.s:114    .text:000000000000005c .L0 
     /tmp/ccXEx6sp.s:118    .text:0000000000000060 .L0 
     /tmp/ccXEx6sp.s:119    .text:0000000000000060 .L0 
     /tmp/ccXEx6sp.s:120    .text:0000000000000060 .L0 
  src/../h/riscv.hpp:174    .text:0000000000000060 .L0 
     /tmp/ccXEx6sp.s:128    .text:0000000000000068 .L0 
     /tmp/ccXEx6sp.s:129    .text:0000000000000068 .L0 
     /tmp/ccXEx6sp.s:133    .text:000000000000006c .L0 
     /tmp/ccXEx6sp.s:135    .text:0000000000000070 .L0 
     /tmp/ccXEx6sp.s:136    .text:0000000000000070 .L0 
     /tmp/ccXEx6sp.s:137    .text:0000000000000070 .L0 
       src/riscv.cpp:27     .text:0000000000000070 .L0 
     /tmp/ccXEx6sp.s:145    .text:0000000000000074 .L0 
     /tmp/ccXEx6sp.s:244    .text:0000000000000098 .L0 
     /tmp/ccXEx6sp.s:245    .text:0000000000000098 .L0 
     /tmp/ccXEx6sp.s:246    .text:0000000000000098 .L0 
GAS LISTING /tmp/ccXEx6sp.s 			page 31


       src/riscv.cpp:34     .text:0000000000000098 .L0 
     /tmp/ccXEx6sp.s:253    .text:000000000000009c .L0 
     /tmp/ccXEx6sp.s:254    .text:000000000000009c .L0 
     /tmp/ccXEx6sp.s:256    .text:000000000000009c .L0 
     /tmp/ccXEx6sp.s:259    .text:00000000000000a4 .L0 
       src/riscv.cpp:37     .text:00000000000000a4 .L0 
     /tmp/ccXEx6sp.s:265    .text:00000000000000a8 .L0 
       src/riscv.cpp:38     .text:00000000000000a8 .L0 
     /tmp/ccXEx6sp.s:274    .text:00000000000000ac .L0 
     /tmp/ccXEx6sp.s:275    .text:00000000000000ac .L0 
     /tmp/ccXEx6sp.s:276    .text:00000000000000ac .L0 
     /tmp/ccXEx6sp.s:281    .text:00000000000000b0 .L0 
  src/../h/riscv.hpp:180    .text:00000000000000b0 .L0 
     /tmp/ccXEx6sp.s:291    .text:00000000000000b4 .L0 
     /tmp/ccXEx6sp.s:292    .text:00000000000000b4 .L0 
     /tmp/ccXEx6sp.s:297    .text:00000000000000b8 .L0 
  src/../h/riscv.hpp:112    .text:00000000000000b8 .L0 
     /tmp/ccXEx6sp.s:310    .text:00000000000000bc .L0 
     /tmp/ccXEx6sp.s:311    .text:00000000000000c0 .L0 
     /tmp/ccXEx6sp.s:312    .text:00000000000000c0 .L0 
     /tmp/ccXEx6sp.s:314    .text:00000000000000c4 .L0 
     /tmp/ccXEx6sp.s:315    .text:00000000000000c4 .L0 
     /tmp/ccXEx6sp.s:317    .text:00000000000000c8 .L0 
     /tmp/ccXEx6sp.s:319    .text:00000000000000cc .L0 
     /tmp/ccXEx6sp.s:323    .text:00000000000000d0 .L0 
     /tmp/ccXEx6sp.s:328    .text:00000000000000d0 .L0 
     /tmp/ccXEx6sp.s:329    .text:00000000000000d0 .L0 
     /tmp/ccXEx6sp.s:330    .text:00000000000000d0 .L0 
     /tmp/ccXEx6sp.s:331    .text:00000000000000d0 .L0 
       src/riscv.cpp:45     .text:00000000000000d0 .L0 
     /tmp/ccXEx6sp.s:338    .text:00000000000000d4 .L0 
     /tmp/ccXEx6sp.s:340    .text:00000000000000d4 .L0 
     /tmp/ccXEx6sp.s:343    .text:00000000000000dc .L0 
       src/riscv.cpp:47     .text:00000000000000dc .L0 
     /tmp/ccXEx6sp.s:349    .text:00000000000000e0 .L0 
       src/riscv.cpp:48     .text:00000000000000e0 .L0 
     /tmp/ccXEx6sp.s:355    .text:00000000000000e4 .L0 
     /tmp/ccXEx6sp.s:359    .text:00000000000000e8 .L0 
     /tmp/ccXEx6sp.s:360    .text:00000000000000e8 .L0 
     /tmp/ccXEx6sp.s:361    .text:00000000000000e8 .L0 
       src/riscv.cpp:54     .text:00000000000000e8 .L0 
     /tmp/ccXEx6sp.s:372    .text:00000000000000ec .L0 
     /tmp/ccXEx6sp.s:373    .text:00000000000000ec .L0 
     /tmp/ccXEx6sp.s:374    .text:00000000000000ec .L0 
     /tmp/ccXEx6sp.s:377    .text:00000000000000f4 .L0 
     /tmp/ccXEx6sp.s:382    .text:00000000000000f8 .L0 
     /tmp/ccXEx6sp.s:383    .text:00000000000000f8 .L0 
     /tmp/ccXEx6sp.s:384    .text:00000000000000f8 .L0 
     /tmp/ccXEx6sp.s:385    .text:00000000000000f8 .L0 
     /tmp/ccXEx6sp.s:386    .text:00000000000000f8 .L0 
       src/riscv.cpp:63     .text:00000000000000f8 .L0 
     /tmp/ccXEx6sp.s:393    .text:00000000000000fc .L0 
       src/riscv.cpp:64     .text:00000000000000fc .L0 
     /tmp/ccXEx6sp.s:399    .text:0000000000000100 .L0 
       src/riscv.cpp:65     .text:0000000000000100 .L0 
     /tmp/ccXEx6sp.s:405    .text:0000000000000104 .L0 
     /tmp/ccXEx6sp.s:407    .text:0000000000000104 .L0 
GAS LISTING /tmp/ccXEx6sp.s 			page 32


     /tmp/ccXEx6sp.s:410    .text:000000000000010c .L0 
     /tmp/ccXEx6sp.s:412    .text:0000000000000110 .L0 
     /tmp/ccXEx6sp.s:414    .text:0000000000000114 .L0 
       src/riscv.cpp:68     .text:0000000000000114 .L0 
     /tmp/ccXEx6sp.s:420    .text:0000000000000118 .L0 
       src/riscv.cpp:69     .text:0000000000000118 .L0 
     /tmp/ccXEx6sp.s:428    .text:0000000000000120 .L0 
       src/riscv.cpp:72     .text:0000000000000120 .L0 
     /tmp/ccXEx6sp.s:434    .text:0000000000000124 .L0 
       src/riscv.cpp:73     .text:0000000000000124 .L0 
     /tmp/ccXEx6sp.s:443    .text:000000000000012c .L0 
     /tmp/ccXEx6sp.s:444    .text:000000000000012c .L0 
     /tmp/ccXEx6sp.s:445    .text:000000000000012c .L0 
     /tmp/ccXEx6sp.s:446    .text:000000000000012c .L0 
     /tmp/ccXEx6sp.s:447    .text:000000000000012c .L0 
       src/riscv.cpp:82     .text:000000000000012c .L0 
     /tmp/ccXEx6sp.s:454    .text:0000000000000130 .L0 
       src/riscv.cpp:83     .text:0000000000000130 .L0 
     /tmp/ccXEx6sp.s:460    .text:0000000000000134 .L0 
       src/riscv.cpp:84     .text:0000000000000134 .L0 
     /tmp/ccXEx6sp.s:466    .text:0000000000000138 .L0 
     /tmp/ccXEx6sp.s:468    .text:0000000000000138 .L0 
     /tmp/ccXEx6sp.s:471    .text:0000000000000140 .L0 
     /tmp/ccXEx6sp.s:473    .text:0000000000000144 .L0 
     /tmp/ccXEx6sp.s:475    .text:0000000000000148 .L0 
       src/riscv.cpp:87     .text:0000000000000148 .L0 
     /tmp/ccXEx6sp.s:481    .text:000000000000014c .L0 
       src/riscv.cpp:88     .text:000000000000014c .L0 
     /tmp/ccXEx6sp.s:489    .text:0000000000000154 .L0 
       src/riscv.cpp:91     .text:0000000000000154 .L0 
     /tmp/ccXEx6sp.s:495    .text:0000000000000158 .L0 
       src/riscv.cpp:92     .text:0000000000000158 .L0 
     /tmp/ccXEx6sp.s:504    .text:0000000000000160 .L0 
     /tmp/ccXEx6sp.s:505    .text:0000000000000160 .L0 
     /tmp/ccXEx6sp.s:506    .text:0000000000000160 .L0 
     /tmp/ccXEx6sp.s:512    .text:000000000000016c .L0 
     /tmp/ccXEx6sp.s:513    .text:000000000000016c .L0 
     /tmp/ccXEx6sp.s:519    .text:0000000000000174 .L0 
     /tmp/ccXEx6sp.s:520    .text:0000000000000174 .L0 
     /tmp/ccXEx6sp.s:523    .text:000000000000017c .L0 
       src/riscv.cpp:100    .text:000000000000017c .L0 
     /tmp/ccXEx6sp.s:529    .text:0000000000000180 .L0 
       src/riscv.cpp:101    .text:0000000000000180 .L0 
     /tmp/ccXEx6sp.s:535    .text:0000000000000184 .L0 
     /tmp/ccXEx6sp.s:538    .text:0000000000000188 .L0 
     /tmp/ccXEx6sp.s:539    .text:0000000000000188 .L0 
     /tmp/ccXEx6sp.s:540    .text:0000000000000188 .L0 
     /tmp/ccXEx6sp.s:543    .text:0000000000000190 .L0 
     /tmp/ccXEx6sp.s:546    .text:0000000000000194 .L0 
     /tmp/ccXEx6sp.s:547    .text:0000000000000194 .L0 
     /tmp/ccXEx6sp.s:548    .text:0000000000000194 .L0 
     /tmp/ccXEx6sp.s:549    .text:0000000000000194 .L0 
       src/riscv.cpp:113    .text:0000000000000194 .L0 
     /tmp/ccXEx6sp.s:556    .text:0000000000000198 .L0 
       src/riscv.cpp:114    .text:0000000000000198 .L0 
     /tmp/ccXEx6sp.s:562    .text:000000000000019c .L0 
     /tmp/ccXEx6sp.s:564    .text:000000000000019c .L0 
GAS LISTING /tmp/ccXEx6sp.s 			page 33


     /tmp/ccXEx6sp.s:568    .text:00000000000001a8 .L0 
     /tmp/ccXEx6sp.s:570    .text:00000000000001ac .L0 
     /tmp/ccXEx6sp.s:572    .text:00000000000001b0 .L0 
       src/riscv.cpp:117    .text:00000000000001b0 .L0 
     /tmp/ccXEx6sp.s:578    .text:00000000000001b4 .L0 
       src/riscv.cpp:118    .text:00000000000001b4 .L0 
     /tmp/ccXEx6sp.s:586    .text:00000000000001bc .L0 
       src/riscv.cpp:121    .text:00000000000001bc .L0 
     /tmp/ccXEx6sp.s:592    .text:00000000000001c0 .L0 
       src/riscv.cpp:122    .text:00000000000001c0 .L0 
     /tmp/ccXEx6sp.s:601    .text:00000000000001c8 .L0 
     /tmp/ccXEx6sp.s:602    .text:00000000000001c8 .L0 
     /tmp/ccXEx6sp.s:603    .text:00000000000001c8 .L0 
       src/riscv.cpp:129    .text:00000000000001c8 .L0 
     /tmp/ccXEx6sp.s:611    .text:00000000000001cc .L0 
     /tmp/ccXEx6sp.s:613    .text:00000000000001d0 .L0 
     /tmp/ccXEx6sp.s:614    .text:00000000000001d0 .L0 
     /tmp/ccXEx6sp.s:618    .text:00000000000001d8 .L0 
       src/riscv.cpp:132    .text:00000000000001d8 .L0 
     /tmp/ccXEx6sp.s:624    .text:00000000000001dc .L0 
       src/riscv.cpp:133    .text:00000000000001dc .L0 
     /tmp/ccXEx6sp.s:630    .text:00000000000001e0 .L0 
     /tmp/ccXEx6sp.s:634    .text:00000000000001e4 .L0 
     /tmp/ccXEx6sp.s:639    .text:00000000000001ec .L0 
     /tmp/ccXEx6sp.s:640    .text:00000000000001ec .L0 
     /tmp/ccXEx6sp.s:641    .text:00000000000001ec .L0 
       src/riscv.cpp:139    .text:00000000000001ec .L0 
     /tmp/ccXEx6sp.s:649    .text:00000000000001f0 .L0 
     /tmp/ccXEx6sp.s:651    .text:00000000000001f4 .L0 
     /tmp/ccXEx6sp.s:652    .text:00000000000001f4 .L0 
     /tmp/ccXEx6sp.s:656    .text:00000000000001fc .L0 
       src/riscv.cpp:142    .text:00000000000001fc .L0 
     /tmp/ccXEx6sp.s:662    .text:0000000000000200 .L0 
       src/riscv.cpp:143    .text:0000000000000200 .L0 
     /tmp/ccXEx6sp.s:668    .text:0000000000000204 .L0 
     /tmp/ccXEx6sp.s:672    .text:0000000000000208 .L0 
     /tmp/ccXEx6sp.s:677    .text:0000000000000210 .L0 
     /tmp/ccXEx6sp.s:678    .text:0000000000000210 .L0 
     /tmp/ccXEx6sp.s:679    .text:0000000000000210 .L0 
       src/riscv.cpp:149    .text:0000000000000210 .L0 
     /tmp/ccXEx6sp.s:687    .text:0000000000000214 .L0 
     /tmp/ccXEx6sp.s:689    .text:0000000000000218 .L0 
     /tmp/ccXEx6sp.s:690    .text:0000000000000218 .L0 
     /tmp/ccXEx6sp.s:694    .text:0000000000000220 .L0 
       src/riscv.cpp:152    .text:0000000000000220 .L0 
     /tmp/ccXEx6sp.s:700    .text:0000000000000224 .L0 
       src/riscv.cpp:153    .text:0000000000000224 .L0 
     /tmp/ccXEx6sp.s:706    .text:0000000000000228 .L0 
     /tmp/ccXEx6sp.s:710    .text:000000000000022c .L0 
     /tmp/ccXEx6sp.s:715    .text:0000000000000234 .L0 
     /tmp/ccXEx6sp.s:716    .text:0000000000000234 .L0 
     /tmp/ccXEx6sp.s:717    .text:0000000000000234 .L0 
       src/riscv.cpp:159    .text:0000000000000234 .L0 
     /tmp/ccXEx6sp.s:725    .text:0000000000000238 .L0 
     /tmp/ccXEx6sp.s:727    .text:000000000000023c .L0 
     /tmp/ccXEx6sp.s:728    .text:000000000000023c .L0 
     /tmp/ccXEx6sp.s:732    .text:0000000000000244 .L0 
GAS LISTING /tmp/ccXEx6sp.s 			page 34


       src/riscv.cpp:162    .text:0000000000000244 .L0 
     /tmp/ccXEx6sp.s:738    .text:0000000000000248 .L0 
       src/riscv.cpp:163    .text:0000000000000248 .L0 
     /tmp/ccXEx6sp.s:744    .text:000000000000024c .L0 
     /tmp/ccXEx6sp.s:748    .text:0000000000000250 .L0 
     /tmp/ccXEx6sp.s:753    .text:0000000000000258 .L0 
     /tmp/ccXEx6sp.s:754    .text:0000000000000258 .L0 
     /tmp/ccXEx6sp.s:755    .text:0000000000000258 .L0 
     /tmp/ccXEx6sp.s:756    .text:0000000000000258 .L0 
     /tmp/ccXEx6sp.s:759    .text:0000000000000260 .L0 
       src/riscv.cpp:170    .text:0000000000000260 .L0 
     /tmp/ccXEx6sp.s:765    .text:0000000000000264 .L0 
       src/riscv.cpp:171    .text:0000000000000264 .L0 
     /tmp/ccXEx6sp.s:771    .text:0000000000000268 .L0 
     /tmp/ccXEx6sp.s:775    .text:000000000000026c .L0 
     /tmp/ccXEx6sp.s:776    .text:000000000000026c .L0 
     /tmp/ccXEx6sp.s:777    .text:000000000000026c .L0 
       src/riscv.cpp:177    .text:000000000000026c .L0 
     /tmp/ccXEx6sp.s:784    .text:0000000000000270 .L0 
     /tmp/ccXEx6sp.s:786    .text:0000000000000270 .L0 
     /tmp/ccXEx6sp.s:790    .text:000000000000027c .L0 
     /tmp/ccXEx6sp.s:793    .text:0000000000000280 .L0 
     /tmp/ccXEx6sp.s:794    .text:0000000000000280 .L0 
     /tmp/ccXEx6sp.s:795    .text:0000000000000280 .L0 
     /tmp/ccXEx6sp.s:796    .text:0000000000000280 .L0 
       src/riscv.cpp:185    .text:0000000000000280 .L0 
     /tmp/ccXEx6sp.s:803    .text:0000000000000284 .L0 
       src/riscv.cpp:186    .text:0000000000000284 .L0 
     /tmp/ccXEx6sp.s:812    .text:0000000000000288 .L0 
     /tmp/ccXEx6sp.s:813    .text:0000000000000288 .L0 
     /tmp/ccXEx6sp.s:814    .text:0000000000000288 .L0 
     /tmp/ccXEx6sp.s:821    .text:000000000000028c .L0 
     /tmp/ccXEx6sp.s:822    .text:000000000000028c .L0 
     /tmp/ccXEx6sp.s:823    .text:000000000000028c .L0 
     /tmp/ccXEx6sp.s:825    .text:0000000000000290 .L0 
     /tmp/ccXEx6sp.s:831    .text:0000000000000294 .L0 
     /tmp/ccXEx6sp.s:832    .text:0000000000000294 .L0 
     /tmp/ccXEx6sp.s:833    .text:0000000000000294 .L0 
       src/riscv.cpp:194    .text:0000000000000294 .L0 
     /tmp/ccXEx6sp.s:840    .text:0000000000000298 .L0 
     /tmp/ccXEx6sp.s:842    .text:0000000000000298 .L0 
     /tmp/ccXEx6sp.s:845    .text:00000000000002a0 .L0 
     /tmp/ccXEx6sp.s:850    .text:00000000000002a4 .L0 
     /tmp/ccXEx6sp.s:851    .text:00000000000002a4 .L0 
     /tmp/ccXEx6sp.s:855    .text:00000000000002b4 .L0 
     /tmp/ccXEx6sp.s:856    .text:00000000000002b4 .L0 
     /tmp/ccXEx6sp.s:862    .text:00000000000002c8 .L0 
     /tmp/ccXEx6sp.s:863    .text:00000000000002c8 .L0 
     /tmp/ccXEx6sp.s:868    .text:00000000000002d8 .L0 
     /tmp/ccXEx6sp.s:869    .text:00000000000002dc .L0 
     /tmp/ccXEx6sp.s:875    .text:00000000000002dc _ZN5Riscv22handleConsoleInterruptEv
     /tmp/ccXEx6sp.s:878    .text:00000000000002dc .L0 
     /tmp/ccXEx6sp.s:879    .text:00000000000002dc .L0 
     /tmp/ccXEx6sp.s:880    .text:00000000000002e0 .L0 
     /tmp/ccXEx6sp.s:883    .text:00000000000002e8 .L0 
     /tmp/ccXEx6sp.s:884    .text:00000000000002e8 .L0 
     /tmp/ccXEx6sp.s:886    .text:00000000000002ec .L0 
GAS LISTING /tmp/ccXEx6sp.s 			page 35


     /tmp/ccXEx6sp.s:888    .text:00000000000002ec .L0 
     /tmp/ccXEx6sp.s:889    .text:00000000000002ec .L0 
     /tmp/ccXEx6sp.s:892    .text:00000000000002f4 .L0 
     /tmp/ccXEx6sp.s:893    .text:00000000000002f8 .L0 
     /tmp/ccXEx6sp.s:895    .text:00000000000002fc .L0 
     /tmp/ccXEx6sp.s:896    .text:00000000000002fc .L0 
     /tmp/ccXEx6sp.s:898    .text:0000000000000300 .L0 
     /tmp/ccXEx6sp.s:900    .text:0000000000000304 .L0 
     /tmp/ccXEx6sp.s:906    .text:0000000000000304 _ZN5Riscv20handleTimerInterruptEv
     /tmp/ccXEx6sp.s:909    .text:0000000000000304 .L0 
     /tmp/ccXEx6sp.s:910    .text:0000000000000304 .L0 
     /tmp/ccXEx6sp.s:911    .text:0000000000000308 .L0 
     /tmp/ccXEx6sp.s:913    .text:000000000000030c .L0 
     /tmp/ccXEx6sp.s:915    .text:0000000000000310 .L0 
     /tmp/ccXEx6sp.s:920    .text:0000000000000310 .L0 
     /tmp/ccXEx6sp.s:921    .text:0000000000000310 .L0 
     /tmp/ccXEx6sp.s:922    .text:0000000000000310 .L0 
     /tmp/ccXEx6sp.s:932    .text:0000000000000318 .L0 
     /tmp/ccXEx6sp.s:933    .text:000000000000031c .L0 
     /tmp/ccXEx6sp.s:934    .text:000000000000031c .L0 
     /tmp/ccXEx6sp.s:936    .text:0000000000000320 .L0 
     /tmp/ccXEx6sp.s:938    .text:0000000000000324 .L0 
     /tmp/ccXEx6sp.s:949    .text:0000000000000324 .L0 
     /tmp/ccXEx6sp.s:157    .rodata:0000000000000000 .L7
     /tmp/ccXEx6sp.s:149    .text:0000000000000080 .L0 
     /tmp/ccXEx6sp.s:506    .text:0000000000000160 .L0 
     /tmp/ccXEx6sp.s:44     .rodata.str1.8:0000000000000000 .LC0
     /tmp/ccXEx6sp.s:851    .text:00000000000002a4 .L0 
     /tmp/ccXEx6sp.s:47     .rodata.str1.8:0000000000000018 .LC1
     /tmp/ccXEx6sp.s:863    .text:00000000000002c8 .L0 
     /tmp/ccXEx6sp.s:846    .text:00000000000002a4 .L4
     /tmp/ccXEx6sp.s:272    .text:00000000000000ac .L5
     /tmp/ccXEx6sp.s:426    .text:0000000000000120 .L23
     /tmp/ccXEx6sp.s:487    .text:0000000000000154 .L24
     /tmp/ccXEx6sp.s:584    .text:00000000000001bc .L25
     /tmp/ccXEx6sp.s:632    .text:00000000000001e4 .L31
     /tmp/ccXEx6sp.s:616    .text:00000000000001d8 .L26
     /tmp/ccXEx6sp.s:670    .text:0000000000000208 .L32
     /tmp/ccXEx6sp.s:654    .text:00000000000001fc .L27
     /tmp/ccXEx6sp.s:708    .text:000000000000022c .L33
     /tmp/ccXEx6sp.s:692    .text:0000000000000220 .L28
     /tmp/ccXEx6sp.s:746    .text:0000000000000250 .L34
     /tmp/ccXEx6sp.s:730    .text:0000000000000244 .L29
     /tmp/ccXEx6sp.s:304    .text:00000000000000bc .L3
     /tmp/ccXEx6sp.s:241    .text:0000000000000098 .L22
     /tmp/ccXEx6sp.s:322    .text:00000000000000d0 .L21
     /tmp/ccXEx6sp.s:357    .text:00000000000000e8 .L20
     /tmp/ccXEx6sp.s:378    .text:00000000000000f8 .L19
     /tmp/ccXEx6sp.s:441    .text:000000000000012c .L18
     /tmp/ccXEx6sp.s:502    .text:0000000000000160 .L17
     /tmp/ccXEx6sp.s:536    .text:0000000000000188 .L16
     /tmp/ccXEx6sp.s:544    .text:0000000000000194 .L15
     /tmp/ccXEx6sp.s:599    .text:00000000000001c8 .L14
     /tmp/ccXEx6sp.s:637    .text:00000000000001ec .L13
     /tmp/ccXEx6sp.s:675    .text:0000000000000210 .L12
     /tmp/ccXEx6sp.s:713    .text:0000000000000234 .L11
     /tmp/ccXEx6sp.s:751    .text:0000000000000258 .L10
GAS LISTING /tmp/ccXEx6sp.s 			page 36


     /tmp/ccXEx6sp.s:773    .text:000000000000026c .L9
     /tmp/ccXEx6sp.s:791    .text:0000000000000280 .L8
     /tmp/ccXEx6sp.s:827    .text:0000000000000294 .L6
     /tmp/ccXEx6sp.s:2726   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccXEx6sp.s:4455   .debug_str:000000000000096c .LASF189
     /tmp/ccXEx6sp.s:4503   .debug_str:0000000000000b65 .LASF190
     /tmp/ccXEx6sp.s:4349   .debug_str:00000000000006a1 .LASF191
     /tmp/ccXEx6sp.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccXEx6sp.s:941    .text:0000000000000324 .Letext0
     /tmp/ccXEx6sp.s:4131   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccXEx6sp.s:4263   .debug_str:0000000000000406 .LASF0
     /tmp/ccXEx6sp.s:4289   .debug_str:00000000000004c6 .LASF1
     /tmp/ccXEx6sp.s:4379   .debug_str:000000000000078a .LASF2
     /tmp/ccXEx6sp.s:4389   .debug_str:00000000000007cf .LASF4
     /tmp/ccXEx6sp.s:4271   .debug_str:0000000000000437 .LASF3
     /tmp/ccXEx6sp.s:4143   .debug_str:000000000000006d .LASF5
     /tmp/ccXEx6sp.s:4367   .debug_str:0000000000000729 .LASF6
     /tmp/ccXEx6sp.s:4279   .debug_str:0000000000000487 .LASF7
     /tmp/ccXEx6sp.s:4233   .debug_str:000000000000031b .LASF8
     /tmp/ccXEx6sp.s:4241   .debug_str:0000000000000367 .LASF9
     /tmp/ccXEx6sp.s:4175   .debug_str:0000000000000172 .LASF10
     /tmp/ccXEx6sp.s:4225   .debug_str:00000000000002f8 .LASF11
     /tmp/ccXEx6sp.s:4193   .debug_str:0000000000000211 .LASF12
     /tmp/ccXEx6sp.s:4173   .debug_str:0000000000000162 .LASF13
     /tmp/ccXEx6sp.s:4429   .debug_str:00000000000008dc .LASF14
     /tmp/ccXEx6sp.s:4217   .debug_str:00000000000002a6 .LASF15
     /tmp/ccXEx6sp.s:4417   .debug_str:0000000000000893 .LASF16
     /tmp/ccXEx6sp.s:4491   .debug_str:0000000000000b29 .LASF65
     /tmp/ccXEx6sp.s:4283   .debug_str:00000000000004ad .LASF192
     /tmp/ccXEx6sp.s:4291   .debug_str:00000000000004d9 .LASF17
     /tmp/ccXEx6sp.s:4221   .debug_str:00000000000002d8 .LASF18
     /tmp/ccXEx6sp.s:4505   .debug_str:0000000000000b73 .LASF19
     /tmp/ccXEx6sp.s:4247   .debug_str:0000000000000395 .LASF52
     /tmp/ccXEx6sp.s:4259   .debug_str:00000000000003e0 .LASF54
     /tmp/ccXEx6sp.s:4475   .debug_str:0000000000000abc .LASF20
     /tmp/ccXEx6sp.s:4469   .debug_str:0000000000000a86 .LASF22
     /tmp/ccXEx6sp.s:4375   .debug_str:0000000000000776 .LASF24
     /tmp/ccXEx6sp.s:4339   .debug_str:000000000000063d .LASF26
     /tmp/ccXEx6sp.s:4361   .debug_str:00000000000006fb .LASF21
     /tmp/ccXEx6sp.s:4363   .debug_str:0000000000000702 .LASF23
     /tmp/ccXEx6sp.s:4329   .debug_str:00000000000005e2 .LASF25
     /tmp/ccXEx6sp.s:4281   .debug_str:000000000000049a .LASF27
     /tmp/ccXEx6sp.s:4501   .debug_str:0000000000000b5d .LASF28
     /tmp/ccXEx6sp.s:4463   .debug_str:0000000000000a4e .LASF29
     /tmp/ccXEx6sp.s:4325   .debug_str:00000000000005d5 .LASF30
     /tmp/ccXEx6sp.s:4337   .debug_str:0000000000000629 .LASF31
     /tmp/ccXEx6sp.s:4297   .debug_str:0000000000000502 .LASF32
     /tmp/ccXEx6sp.s:4365   .debug_str:0000000000000715 .LASF33
     /tmp/ccXEx6sp.s:4529   .debug_str:0000000000000c1d .LASF34
     /tmp/ccXEx6sp.s:4267   .debug_str:0000000000000419 .LASF35
     /tmp/ccXEx6sp.s:4425   .debug_str:00000000000008c8 .LASF36
     /tmp/ccXEx6sp.s:4393   .debug_str:00000000000007db .LASF37
     /tmp/ccXEx6sp.s:4395   .debug_str:00000000000007ee .LASF38
     /tmp/ccXEx6sp.s:4179   .debug_str:0000000000000186 .LASF39
     /tmp/ccXEx6sp.s:4213   .debug_str:0000000000000295 .LASF40
     /tmp/ccXEx6sp.s:4255   .debug_str:00000000000003c5 .LASF41
     /tmp/ccXEx6sp.s:4265   .debug_str:0000000000000413 .LASF42
GAS LISTING /tmp/ccXEx6sp.s 			page 37


     /tmp/ccXEx6sp.s:4205   .debug_str:000000000000026e .LASF43
     /tmp/ccXEx6sp.s:4145   .debug_str:0000000000000074 .LASF44
     /tmp/ccXEx6sp.s:4383   .debug_str:00000000000007a2 .LASF45
     /tmp/ccXEx6sp.s:4377   .debug_str:000000000000077f .LASF46
     /tmp/ccXEx6sp.s:4523   .debug_str:0000000000000bef .LASF47
     /tmp/ccXEx6sp.s:4493   .debug_str:0000000000000b2f .LASF48
     /tmp/ccXEx6sp.s:4511   .debug_str:0000000000000b8f .LASF49
     /tmp/ccXEx6sp.s:4487   .debug_str:0000000000000b01 .LASF50
     /tmp/ccXEx6sp.s:4309   .debug_str:0000000000000532 .LASF51
     /tmp/ccXEx6sp.s:4443   .debug_str:0000000000000925 .LASF53
     /tmp/ccXEx6sp.s:4359   .debug_str:00000000000006e2 .LASF55
     /tmp/ccXEx6sp.s:4243   .debug_str:0000000000000375 .LASF56
     /tmp/ccXEx6sp.s:4161   .debug_str:00000000000000ef .LASF58
     /tmp/ccXEx6sp.s:4431   .debug_str:00000000000008e8 .LASF57
     /tmp/ccXEx6sp.s:4331   .debug_str:00000000000005e9 .LASF59
     /tmp/ccXEx6sp.s:4199   .debug_str:000000000000023f .LASF60
     /tmp/ccXEx6sp.s:4317   .debug_str:000000000000057b .LASF61
     /tmp/ccXEx6sp.s:4405   .debug_str:0000000000000839 .LASF95
     /tmp/ccXEx6sp.s:4177   .debug_str:0000000000000181 .LASF62
     /tmp/ccXEx6sp.s:4153   .debug_str:00000000000000af .LASF63
     /tmp/ccXEx6sp.s:4287   .debug_str:00000000000004c1 .LASF64
     /tmp/ccXEx6sp.s:4345   .debug_str:0000000000000685 .LASF66
     /tmp/ccXEx6sp.s:4373   .debug_str:000000000000076a .LASF67
     /tmp/ccXEx6sp.s:4483   .debug_str:0000000000000af0 .LASF68
     /tmp/ccXEx6sp.s:4315   .debug_str:0000000000000573 .LASF69
     /tmp/ccXEx6sp.s:4397   .debug_str:00000000000007f5 .LASF70
     /tmp/ccXEx6sp.s:4311   .debug_str:0000000000000548 .LASF71
     /tmp/ccXEx6sp.s:4147   .debug_str:000000000000007f .LASF73
     /tmp/ccXEx6sp.s:4439   .debug_str:0000000000000911 .LASF72
     /tmp/ccXEx6sp.s:4313   .debug_str:0000000000000552 .LASF74
     /tmp/ccXEx6sp.s:4269   .debug_str:000000000000042d .LASF76
     /tmp/ccXEx6sp.s:4343   .debug_str:0000000000000657 .LASF142
     /tmp/ccXEx6sp.s:4231   .debug_str:0000000000000311 .LASF75
     /tmp/ccXEx6sp.s:4407   .debug_str:0000000000000845 .LASF134
     /tmp/ccXEx6sp.s:4519   .debug_str:0000000000000bc0 .LASF193
     /tmp/ccXEx6sp.s:4253   .debug_str:00000000000003ad .LASF194
     /tmp/ccXEx6sp.s:4353   .debug_str:00000000000006c8 .LASF77
     /tmp/ccXEx6sp.s:4477   .debug_str:0000000000000ac5 .LASF195
     /tmp/ccXEx6sp.s:4423   .debug_str:00000000000008c3 .LASF78
     /tmp/ccXEx6sp.s:4327   .debug_str:00000000000005dd .LASF79
     /tmp/ccXEx6sp.s:4319   .debug_str:000000000000059f .LASF80
     /tmp/ccXEx6sp.s:4419   .debug_str:00000000000008a9 .LASF81
     /tmp/ccXEx6sp.s:4223   .debug_str:00000000000002e1 .LASF87
     /tmp/ccXEx6sp.s:4381   .debug_str:0000000000000798 .LASF196
     /tmp/ccXEx6sp.s:4371   .debug_str:0000000000000753 .LASF197
     /tmp/ccXEx6sp.s:4285   .debug_str:00000000000004b8 .LASF82
     /tmp/ccXEx6sp.s:4165   .debug_str:0000000000000122 .LASF83
     /tmp/ccXEx6sp.s:4299   .debug_str:000000000000050a .LASF84
     /tmp/ccXEx6sp.s:4219   .debug_str:00000000000002bc .LASF85
     /tmp/ccXEx6sp.s:4347   .debug_str:0000000000000695 .LASF86
     /tmp/ccXEx6sp.s:4489   .debug_str:0000000000000b0b .LASF88
     /tmp/ccXEx6sp.s:4531   .debug_str:0000000000000c25 .LASF89
     /tmp/ccXEx6sp.s:4521   .debug_str:0000000000000bd4 .LASF90
     /tmp/ccXEx6sp.s:4403   .debug_str:000000000000082e .LASF91
     /tmp/ccXEx6sp.s:4277   .debug_str:000000000000046a .LASF92
     /tmp/ccXEx6sp.s:4357   .debug_str:00000000000006d9 .LASF93
     /tmp/ccXEx6sp.s:4137   .debug_str:000000000000001f .LASF94
GAS LISTING /tmp/ccXEx6sp.s 			page 38


     /tmp/ccXEx6sp.s:4181   .debug_str:0000000000000199 .LASF96
     /tmp/ccXEx6sp.s:4391   .debug_str:00000000000007d6 .LASF97
     /tmp/ccXEx6sp.s:4141   .debug_str:0000000000000061 .LASF98
     /tmp/ccXEx6sp.s:4441   .debug_str:000000000000091a .LASF99
     /tmp/ccXEx6sp.s:4323   .debug_str:00000000000005be .LASF100
     /tmp/ccXEx6sp.s:4159   .debug_str:00000000000000e3 .LASF101
     /tmp/ccXEx6sp.s:4471   .debug_str:0000000000000a9b .LASF102
     /tmp/ccXEx6sp.s:4499   .debug_str:0000000000000b53 .LASF103
     /tmp/ccXEx6sp.s:4169   .debug_str:0000000000000144 .LASF104
     /tmp/ccXEx6sp.s:4445   .debug_str:0000000000000931 .LASF105
     /tmp/ccXEx6sp.s:4187   .debug_str:00000000000001cb .LASF106
     /tmp/ccXEx6sp.s:4201   .debug_str:0000000000000256 .LASF107
     /tmp/ccXEx6sp.s:4497   .debug_str:0000000000000b41 .LASF108
     /tmp/ccXEx6sp.s:4479   .debug_str:0000000000000aca .LASF109
     /tmp/ccXEx6sp.s:4203   .debug_str:000000000000025d .LASF110
     /tmp/ccXEx6sp.s:4527   .debug_str:0000000000000c12 .LASF111
     /tmp/ccXEx6sp.s:4185   .debug_str:00000000000001b4 .LASF112
     /tmp/ccXEx6sp.s:4135   .debug_str:0000000000000016 .LASF113
     /tmp/ccXEx6sp.s:4237   .debug_str:0000000000000349 .LASF114
     /tmp/ccXEx6sp.s:4385   .debug_str:00000000000007ba .LASF115
     /tmp/ccXEx6sp.s:4133   .debug_str:0000000000000000 .LASF116
     /tmp/ccXEx6sp.s:4275   .debug_str:000000000000045b .LASF117
     /tmp/ccXEx6sp.s:4411   .debug_str:000000000000085c .LASF118
     /tmp/ccXEx6sp.s:4307   .debug_str:0000000000000526 .LASF119
     /tmp/ccXEx6sp.s:4333   .debug_str:000000000000060b .LASF120
     /tmp/ccXEx6sp.s:4427   .debug_str:00000000000008cf .LASF121
     /tmp/ccXEx6sp.s:4481   .debug_str:0000000000000ad0 .LASF122
     /tmp/ccXEx6sp.s:4341   .debug_str:0000000000000652 .LASF162
     /tmp/ccXEx6sp.s:4215   .debug_str:000000000000029b .LASF123
     /tmp/ccXEx6sp.s:4235   .debug_str:000000000000032b .LASF124
     /tmp/ccXEx6sp.s:4517   .debug_str:0000000000000bba .LASF125
     /tmp/ccXEx6sp.s:4273   .debug_str:0000000000000449 .LASF126
     /tmp/ccXEx6sp.s:4453   .debug_str:0000000000000964 .LASF127
     /tmp/ccXEx6sp.s:4457   .debug_str:0000000000000a30 .LASF198
     /tmp/ccXEx6sp.s:4207   .debug_str:0000000000000280 .LASF128
     /tmp/ccXEx6sp.s:4409   .debug_str:0000000000000856 .LASF129
     /tmp/ccXEx6sp.s:4467   .debug_str:0000000000000a7e .LASF130
     /tmp/ccXEx6sp.s:4415   .debug_str:000000000000088a .LASF131
     /tmp/ccXEx6sp.s:4447   .debug_str:000000000000093c .LASF132
     /tmp/ccXEx6sp.s:4229   .debug_str:000000000000030c .LASF133
     /tmp/ccXEx6sp.s:4211   .debug_str:000000000000028e .LASF135
     /tmp/ccXEx6sp.s:4355   .debug_str:00000000000006d2 .LASF136
     /tmp/ccXEx6sp.s:4515   .debug_str:0000000000000bb1 .LASF137
     /tmp/ccXEx6sp.s:4295   .debug_str:00000000000004fb .LASF138
     /tmp/ccXEx6sp.s:4163   .debug_str:0000000000000114 .LASF139
     /tmp/ccXEx6sp.s:4293   .debug_str:00000000000004e2 .LASF140
     /tmp/ccXEx6sp.s:4197   .debug_str:0000000000000231 .LASF141
     /tmp/ccXEx6sp.s:4139   .debug_str:0000000000000039 .LASF143
     /tmp/ccXEx6sp.s:4209   .debug_str:0000000000000285 .LASF144
     /tmp/ccXEx6sp.s:4183   .debug_str:00000000000001a1 .LASF145
     /tmp/ccXEx6sp.s:4387   .debug_str:00000000000007c4 .LASF199
     /tmp/ccXEx6sp.s:4305   .debug_str:0000000000000521 .LASF146
     /tmp/ccXEx6sp.s:4261   .debug_str:00000000000003f8 .LASF147
     /tmp/ccXEx6sp.s:4257   .debug_str:00000000000003d7 .LASF148
     /tmp/ccXEx6sp.s:4507   .debug_str:0000000000000b7c .LASF149
     /tmp/ccXEx6sp.s:4157   .debug_str:00000000000000de .LASF150
     /tmp/ccXEx6sp.s:4369   .debug_str:000000000000073c .LASF151
GAS LISTING /tmp/ccXEx6sp.s 			page 39


     /tmp/ccXEx6sp.s:4413   .debug_str:0000000000000876 .LASF152
     /tmp/ccXEx6sp.s:4155   .debug_str:00000000000000b4 .LASF153
     /tmp/ccXEx6sp.s:4461   .debug_str:0000000000000a49 .LASF154
     /tmp/ccXEx6sp.s:4321   .debug_str:00000000000005a4 .LASF155
     /tmp/ccXEx6sp.s:4433   .debug_str:00000000000008fd .LASF156
     /tmp/ccXEx6sp.s:4465   .debug_str:0000000000000a62 .LASF157
     /tmp/ccXEx6sp.s:4151   .debug_str:00000000000000a9 .LASF158
     /tmp/ccXEx6sp.s:4451   .debug_str:0000000000000949 .LASF159
     /tmp/ccXEx6sp.s:4437   .debug_str:0000000000000909 .LASF160
     /tmp/ccXEx6sp.s:4191   .debug_str:00000000000001f4 .LASF161
     /tmp/ccXEx6sp.s:907    .text:0000000000000304 .LFB48
     /tmp/ccXEx6sp.s:939    .text:0000000000000324 .LFE48
     /tmp/ccXEx6sp.s:918    .text:0000000000000310 .LBB50
     /tmp/ccXEx6sp.s:930    .text:0000000000000318 .LBE50
     /tmp/ccXEx6sp.s:3820   .debug_loc:0000000000000000 .LLST34
     /tmp/ccXEx6sp.s:876    .text:00000000000002dc .LFB47
     /tmp/ccXEx6sp.s:901    .text:0000000000000304 .LFE47
     /tmp/ccXEx6sp.s:890    .text:00000000000002f4 .LVL63
     /tmp/ccXEx6sp.s:54     .text:0000000000000020 .LFB46
     /tmp/ccXEx6sp.s:870    .text:00000000000002dc .LFE46
     /tmp/ccXEx6sp.s:4421   .debug_str:00000000000008bc .LASF163
     /tmp/ccXEx6sp.s:3828   .debug_loc:0000000000000024 .LLST0
     /tmp/ccXEx6sp.s:4117   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccXEx6sp.s:4459   .debug_str:0000000000000a44 .LASF164
     /tmp/ccXEx6sp.s:4495   .debug_str:0000000000000b39 .LASF165
     /tmp/ccXEx6sp.s:4239   .debug_str:000000000000035d .LASF166
     /tmp/ccXEx6sp.s:3851   .debug_loc:0000000000000093 .LLST1
     /tmp/ccXEx6sp.s:4449   .debug_str:0000000000000944 .LASF167
     /tmp/ccXEx6sp.s:3886   .debug_loc:000000000000013b .LLST2
     /tmp/ccXEx6sp.s:3893   .debug_loc:000000000000015e .LLST3
     /tmp/ccXEx6sp.s:4167   .debug_str:000000000000013f .LASF168
     /tmp/ccXEx6sp.s:3900   .debug_loc:0000000000000181 .LLST4
     /tmp/ccXEx6sp.s:3907   .debug_loc:00000000000001a4 .LLST5
     /tmp/ccXEx6sp.s:3914   .debug_loc:00000000000001c7 .LLST6
     /tmp/ccXEx6sp.s:3921   .debug_loc:00000000000001ea .LLST7
     /tmp/ccXEx6sp.s:4525   .debug_str:0000000000000c07 .LASF169
     /tmp/ccXEx6sp.s:3928   .debug_loc:000000000000020d .LLST8
     /tmp/ccXEx6sp.s:4149   .debug_str:00000000000000a0 .LASF170
     /tmp/ccXEx6sp.s:3935   .debug_loc:0000000000000230 .LLST9
     /tmp/ccXEx6sp.s:4245   .debug_str:000000000000038d .LASF171
     /tmp/ccXEx6sp.s:3942   .debug_loc:0000000000000253 .LLST10
     /tmp/ccXEx6sp.s:4509   .debug_str:0000000000000b88 .LASF172
     /tmp/ccXEx6sp.s:3949   .debug_loc:0000000000000276 .LLST11
     /tmp/ccXEx6sp.s:3956   .debug_loc:0000000000000299 .LLST12
     /tmp/ccXEx6sp.s:3963   .debug_loc:00000000000002bc .LLST13
     /tmp/ccXEx6sp.s:3970   .debug_loc:00000000000002df .LLST14
     /tmp/ccXEx6sp.s:3977   .debug_loc:0000000000000302 .LLST15
     /tmp/ccXEx6sp.s:4171   .debug_str:0000000000000159 .LASF173
     /tmp/ccXEx6sp.s:3984   .debug_loc:0000000000000325 .LLST16
     /tmp/ccXEx6sp.s:4303   .debug_str:0000000000000519 .LASF174
     /tmp/ccXEx6sp.s:3991   .debug_loc:0000000000000348 .LLST17
     /tmp/ccXEx6sp.s:4473   .debug_str:0000000000000ab2 .LASF175
     /tmp/ccXEx6sp.s:3998   .debug_loc:000000000000036b .LLST18
     /tmp/ccXEx6sp.s:4399   .debug_str:0000000000000814 .LASF176
     /tmp/ccXEx6sp.s:4005   .debug_loc:000000000000038e .LLST19
     /tmp/ccXEx6sp.s:4335   .debug_str:0000000000000622 .LASF177
     /tmp/ccXEx6sp.s:4012   .debug_loc:00000000000003b1 .LLST20
GAS LISTING /tmp/ccXEx6sp.s 			page 40


     /tmp/ccXEx6sp.s:4019   .debug_loc:00000000000003d4 .LLST21
     /tmp/ccXEx6sp.s:4026   .debug_loc:00000000000003f7 .LLST22
     /tmp/ccXEx6sp.s:4033   .debug_loc:000000000000041a .LLST23
     /tmp/ccXEx6sp.s:4040   .debug_loc:000000000000043d .LLST24
     /tmp/ccXEx6sp.s:369    .text:00000000000000ec .LBB35
     /tmp/ccXEx6sp.s:380    .text:00000000000000f8 .LBE35
     /tmp/ccXEx6sp.s:375    .text:00000000000000f4 .LVL15
     /tmp/ccXEx6sp.s:509    .text:000000000000016c .LBB37
     /tmp/ccXEx6sp.s:517    .text:0000000000000174 .LBE37
     /tmp/ccXEx6sp.s:4047   .debug_loc:0000000000000460 .LLST26
     /tmp/ccXEx6sp.s:4055   .debug_loc:0000000000000484 .LLST27
     /tmp/ccXEx6sp.s:810    .text:0000000000000288 .LBB39
     /tmp/ccXEx6sp.s:817    .text:000000000000028c .LBE39
     /tmp/ccXEx6sp.s:4062   .debug_loc:00000000000004a7 .LLST28
     /tmp/ccXEx6sp.s:4069   .debug_loc:00000000000004ca .LLST29
     /tmp/ccXEx6sp.s:819    .text:000000000000028c .LBB41
     /tmp/ccXEx6sp.s:829    .text:0000000000000294 .LBE41
     /tmp/ccXEx6sp.s:4076   .debug_loc:00000000000004ed .LLST30
     /tmp/ccXEx6sp.s:4083   .debug_loc:0000000000000510 .LLST31
     /tmp/ccXEx6sp.s:257    .text:00000000000000a4 .LVL4
     /tmp/ccXEx6sp.s:341    .text:00000000000000dc .LVL12
     /tmp/ccXEx6sp.s:408    .text:000000000000010c .LVL19
     /tmp/ccXEx6sp.s:469    .text:0000000000000140 .LVL24
     /tmp/ccXEx6sp.s:521    .text:000000000000017c .LVL28
     /tmp/ccXEx6sp.s:541    .text:0000000000000190 .LVL29
     /tmp/ccXEx6sp.s:566    .text:00000000000001a8 .LVL32
     /tmp/ccXEx6sp.s:615    .text:00000000000001d8 .LVL35
     /tmp/ccXEx6sp.s:653    .text:00000000000001fc .LVL39
     /tmp/ccXEx6sp.s:691    .text:0000000000000220 .LVL43
     /tmp/ccXEx6sp.s:729    .text:0000000000000244 .LVL47
     /tmp/ccXEx6sp.s:757    .text:0000000000000260 .LVL50
     /tmp/ccXEx6sp.s:788    .text:000000000000027c .LVL53
     /tmp/ccXEx6sp.s:843    .text:00000000000002a0 .LVL59
     /tmp/ccXEx6sp.s:95     .text:000000000000004c .LBB30
     /tmp/ccXEx6sp.s:110    .text:0000000000000058 .LBE30
     /tmp/ccXEx6sp.s:116    .text:0000000000000060 .LBB32
     /tmp/ccXEx6sp.s:131    .text:000000000000006c .LBE32
     /tmp/ccXEx6sp.s:278    .text:00000000000000b0 .LBB43
     /tmp/ccXEx6sp.s:289    .text:00000000000000b4 .LBE43
     /tmp/ccXEx6sp.s:4090   .debug_loc:0000000000000533 .LLST32
     /tmp/ccXEx6sp.s:294    .text:00000000000000b8 .LBB45
     /tmp/ccXEx6sp.s:306    .text:00000000000000bc .LBE45
     /tmp/ccXEx6sp.s:4097   .debug_loc:0000000000000556 .LLST33
     /tmp/ccXEx6sp.s:68     .text:0000000000000034 .LBB26
     /tmp/ccXEx6sp.s:85     .text:0000000000000040 .LBE26
     /tmp/ccXEx6sp.s:853    .text:00000000000002b4 .LVL60
     /tmp/ccXEx6sp.s:860    .text:00000000000002c8 .LVL61
     /tmp/ccXEx6sp.s:865    .text:00000000000002d8 .LVL62
     /tmp/ccXEx6sp.s:4435   .debug_str:0000000000000904 .LASF178
     /tmp/ccXEx6sp.s:10     .text:0000000000000000 .LFB45
     /tmp/ccXEx6sp.s:40     .text:0000000000000020 .LFE45
     /tmp/ccXEx6sp.s:4227   .debug_str:0000000000000307 .LASF179
     /tmp/ccXEx6sp.s:4249   .debug_str:00000000000003a0 .LASF180
     /tmp/ccXEx6sp.s:4485   .debug_str:0000000000000afc .LASF181
     /tmp/ccXEx6sp.s:4195   .debug_str:0000000000000221 .LASF182
     /tmp/ccXEx6sp.s:4251   .debug_str:00000000000003a6 .LASF183
     /tmp/ccXEx6sp.s:4301   .debug_str:0000000000000512 .LASF184
GAS LISTING /tmp/ccXEx6sp.s 			page 41


     /tmp/ccXEx6sp.s:4189   .debug_str:00000000000001e1 .LASF185
     /tmp/ccXEx6sp.s:4513   .debug_str:0000000000000ba5 .LASF186
     /tmp/ccXEx6sp.s:4401   .debug_str:000000000000081f .LASF187
     /tmp/ccXEx6sp.s:4351   .debug_str:00000000000006bf .LASF188
     /tmp/ccXEx6sp.s:917    .text:0000000000000310 .LVL64
     /tmp/ccXEx6sp.s:927    .text:0000000000000318 .LVL65
     /tmp/ccXEx6sp.s:83     .text:0000000000000040 .LVL0
     /tmp/ccXEx6sp.s:270    .text:00000000000000ac .LVL5
     /tmp/ccXEx6sp.s:321    .text:00000000000000d0 .LVL10
     /tmp/ccXEx6sp.s:391    .text:00000000000000fc .LVL16
     /tmp/ccXEx6sp.s:440    .text:000000000000012c .LVL20
     /tmp/ccXEx6sp.s:452    .text:0000000000000130 .LVL21
     /tmp/ccXEx6sp.s:501    .text:0000000000000160 .LVL25
     /tmp/ccXEx6sp.s:554    .text:0000000000000198 .LVL30
     /tmp/ccXEx6sp.s:598    .text:00000000000001c8 .LVL33
     /tmp/ccXEx6sp.s:608    .text:00000000000001cc .LVL34
     /tmp/ccXEx6sp.s:631    .text:00000000000001e4 .LVL36
     /tmp/ccXEx6sp.s:635    .text:00000000000001e8 .LVL37
     /tmp/ccXEx6sp.s:646    .text:00000000000001f0 .LVL38
     /tmp/ccXEx6sp.s:669    .text:0000000000000208 .LVL40
     /tmp/ccXEx6sp.s:673    .text:000000000000020c .LVL41
     /tmp/ccXEx6sp.s:684    .text:0000000000000214 .LVL42
     /tmp/ccXEx6sp.s:707    .text:000000000000022c .LVL44
     /tmp/ccXEx6sp.s:711    .text:0000000000000230 .LVL45
     /tmp/ccXEx6sp.s:722    .text:0000000000000238 .LVL46
     /tmp/ccXEx6sp.s:745    .text:0000000000000250 .LVL48
     /tmp/ccXEx6sp.s:749    .text:0000000000000254 .LVL49
     /tmp/ccXEx6sp.s:142    .text:0000000000000074 .LVL1
     /tmp/ccXEx6sp.s:148    .text:0000000000000080 .LVL2
     /tmp/ccXEx6sp.s:251    .text:000000000000009c .LVL3
     /tmp/ccXEx6sp.s:336    .text:00000000000000d4 .LVL11
     /tmp/ccXEx6sp.s:356    .text:00000000000000e8 .LVL13
     /tmp/ccXEx6sp.s:366    .text:00000000000000ec .LVL14
     /tmp/ccXEx6sp.s:397    .text:0000000000000100 .LVL17
     /tmp/ccXEx6sp.s:403    .text:0000000000000104 .LVL18
     /tmp/ccXEx6sp.s:458    .text:0000000000000134 .LVL22
     /tmp/ccXEx6sp.s:464    .text:0000000000000138 .LVL23
     /tmp/ccXEx6sp.s:560    .text:000000000000019c .LVL31
     /tmp/ccXEx6sp.s:772    .text:000000000000026c .LVL51
     /tmp/ccXEx6sp.s:782    .text:0000000000000270 .LVL52
     /tmp/ccXEx6sp.s:801    .text:0000000000000284 .LVL54
     /tmp/ccXEx6sp.s:826    .text:0000000000000294 .LVL57
     /tmp/ccXEx6sp.s:807    .text:0000000000000288 .LVL55
     /tmp/ccXEx6sp.s:838    .text:0000000000000298 .LVL58
     /tmp/ccXEx6sp.s:508    .text:000000000000016c .LVL26
     /tmp/ccXEx6sp.s:515    .text:0000000000000174 .LVL27
     /tmp/ccXEx6sp.s:815    .text:000000000000028c .LVL56
     /tmp/ccXEx6sp.s:277    .text:00000000000000b0 .LVL6
     /tmp/ccXEx6sp.s:286    .text:00000000000000b4 .LVL7
     /tmp/ccXEx6sp.s:293    .text:00000000000000b8 .LVL8
     /tmp/ccXEx6sp.s:302    .text:00000000000000bc .LVL9
     /tmp/ccXEx6sp.s:950    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccXEx6sp.s:93     .text:000000000000004c .LBB29
     /tmp/ccXEx6sp.s:307    .text:00000000000000bc .LBE29
     /tmp/ccXEx6sp.s:325    .text:00000000000000d0 .LBB48
     /tmp/ccXEx6sp.s:848    .text:00000000000002a4 .LBE48
     /tmp/ccXEx6sp.s:242    .text:0000000000000098 .LBB34
GAS LISTING /tmp/ccXEx6sp.s 			page 42


     /tmp/ccXEx6sp.s:273    .text:00000000000000ac .LBE34
     /tmp/ccXEx6sp.s:326    .text:00000000000000d0 .LBB47
     /tmp/ccXEx6sp.s:847    .text:00000000000002a4 .LBE47

UNDEFINED SYMBOLS
_ZN15MemoryAllocator9mem_allocEm
_ZN15MemoryAllocator8mem_freeEPv
_ZN9Scheduler3putEP3TCB
_ZN3TCB10initThreadEPFvPvES0_
_ZN3TCB12createThreadEPFvPvES0_
_ZN3TCB7runningE
_ZN3TCB8dispatchEv
_ZN13SyncSemaphore19createSyncSemaphoreEi
_ZN13SyncSemaphore5closeEv
_ZN13SyncSemaphore4waitEv
_ZN13SyncSemaphore6signalEv
__getc
__putc
_ZN3TCB14synchronizeTCBEv
_Z11printStringPKc
_Z8printIntiii
console_handler
